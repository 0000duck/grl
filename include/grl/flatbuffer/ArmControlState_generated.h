// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ARMCONTROLSTATE_GRL_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_ARMCONTROLSTATE_GRL_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"

#include "Geometry_generated.h"
#include "JointState_generated.h"

namespace grl {
namespace flatbuffer {

struct StartArm;
struct StartArmT;

struct StopArm;
struct StopArmT;

struct PauseArm;
struct PauseArmT;

struct TeachArm;
struct TeachArmT;

struct ShutdownArm;
struct ShutdownArmT;

struct MoveArmTrajectory;
struct MoveArmTrajectoryT;

struct MoveArmJointServo;
struct MoveArmJointServoT;

struct MoveArmCartesianServo;
struct MoveArmCartesianServoT;

struct ArmControlState;
struct ArmControlStateT;

struct ArmControlSeries;
struct ArmControlSeriesT;

enum class ArmState : uint8_t {
  NONE = 0,
  StartArm = 1,
  StopArm = 2,
  PauseArm = 3,
  ShutdownArm = 4,
  TeachArm = 5,
  MoveArmTrajectory = 6,
  MoveArmJointServo = 7,
  MoveArmCartesianServo = 8,
  MIN = NONE,
  MAX = MoveArmCartesianServo
};

inline const ArmState (&EnumValuesArmState())[9] {
  static const ArmState values[] = {
    ArmState::NONE,
    ArmState::StartArm,
    ArmState::StopArm,
    ArmState::PauseArm,
    ArmState::ShutdownArm,
    ArmState::TeachArm,
    ArmState::MoveArmTrajectory,
    ArmState::MoveArmJointServo,
    ArmState::MoveArmCartesianServo
  };
  return values;
}

inline const char * const *EnumNamesArmState() {
  static const char * const names[] = {
    "NONE",
    "StartArm",
    "StopArm",
    "PauseArm",
    "ShutdownArm",
    "TeachArm",
    "MoveArmTrajectory",
    "MoveArmJointServo",
    "MoveArmCartesianServo",
    nullptr
  };
  return names;
}

inline const char *EnumNameArmState(ArmState e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesArmState()[index];
}

template<typename T> struct ArmStateTraits {
  static const ArmState enum_value = ArmState::NONE;
};

template<> struct ArmStateTraits<StartArm> {
  static const ArmState enum_value = ArmState::StartArm;
};

template<> struct ArmStateTraits<StopArm> {
  static const ArmState enum_value = ArmState::StopArm;
};

template<> struct ArmStateTraits<PauseArm> {
  static const ArmState enum_value = ArmState::PauseArm;
};

template<> struct ArmStateTraits<ShutdownArm> {
  static const ArmState enum_value = ArmState::ShutdownArm;
};

template<> struct ArmStateTraits<TeachArm> {
  static const ArmState enum_value = ArmState::TeachArm;
};

template<> struct ArmStateTraits<MoveArmTrajectory> {
  static const ArmState enum_value = ArmState::MoveArmTrajectory;
};

template<> struct ArmStateTraits<MoveArmJointServo> {
  static const ArmState enum_value = ArmState::MoveArmJointServo;
};

template<> struct ArmStateTraits<MoveArmCartesianServo> {
  static const ArmState enum_value = ArmState::MoveArmCartesianServo;
};

struct ArmStateUnion {
  ArmState type;
  void *value;

  ArmStateUnion() : type(ArmState::NONE), value(nullptr) {}
  ArmStateUnion(ArmStateUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(ArmState::NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  ArmStateUnion(const ArmStateUnion &) FLATBUFFERS_NOEXCEPT;
  ArmStateUnion &operator=(const ArmStateUnion &u) FLATBUFFERS_NOEXCEPT
    { ArmStateUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  ArmStateUnion &operator=(ArmStateUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~ArmStateUnion() { Reset(); }

  void Reset();

#ifndef FLATBUFFERS_CPP98_STL
  template <typename T>
  void Set(T&& val) {
    Reset();
    type = ArmStateTraits<typename T::TableType>::enum_value;
    if (type != ArmState::NONE) {
      value = new T(std::forward<T>(val));
    }
  }
#endif  // FLATBUFFERS_CPP98_STL

  static void *UnPack(const void *obj, ArmState type, const flatbuffers::resolver_function_t *resolver);
  flatbuffers::Offset<void> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  StartArmT *AsStartArm() {
    return type == ArmState::StartArm ?
      reinterpret_cast<StartArmT *>(value) : nullptr;
  }
  const StartArmT *AsStartArm() const {
    return type == ArmState::StartArm ?
      reinterpret_cast<const StartArmT *>(value) : nullptr;
  }
  StopArmT *AsStopArm() {
    return type == ArmState::StopArm ?
      reinterpret_cast<StopArmT *>(value) : nullptr;
  }
  const StopArmT *AsStopArm() const {
    return type == ArmState::StopArm ?
      reinterpret_cast<const StopArmT *>(value) : nullptr;
  }
  PauseArmT *AsPauseArm() {
    return type == ArmState::PauseArm ?
      reinterpret_cast<PauseArmT *>(value) : nullptr;
  }
  const PauseArmT *AsPauseArm() const {
    return type == ArmState::PauseArm ?
      reinterpret_cast<const PauseArmT *>(value) : nullptr;
  }
  ShutdownArmT *AsShutdownArm() {
    return type == ArmState::ShutdownArm ?
      reinterpret_cast<ShutdownArmT *>(value) : nullptr;
  }
  const ShutdownArmT *AsShutdownArm() const {
    return type == ArmState::ShutdownArm ?
      reinterpret_cast<const ShutdownArmT *>(value) : nullptr;
  }
  TeachArmT *AsTeachArm() {
    return type == ArmState::TeachArm ?
      reinterpret_cast<TeachArmT *>(value) : nullptr;
  }
  const TeachArmT *AsTeachArm() const {
    return type == ArmState::TeachArm ?
      reinterpret_cast<const TeachArmT *>(value) : nullptr;
  }
  MoveArmTrajectoryT *AsMoveArmTrajectory() {
    return type == ArmState::MoveArmTrajectory ?
      reinterpret_cast<MoveArmTrajectoryT *>(value) : nullptr;
  }
  const MoveArmTrajectoryT *AsMoveArmTrajectory() const {
    return type == ArmState::MoveArmTrajectory ?
      reinterpret_cast<const MoveArmTrajectoryT *>(value) : nullptr;
  }
  MoveArmJointServoT *AsMoveArmJointServo() {
    return type == ArmState::MoveArmJointServo ?
      reinterpret_cast<MoveArmJointServoT *>(value) : nullptr;
  }
  const MoveArmJointServoT *AsMoveArmJointServo() const {
    return type == ArmState::MoveArmJointServo ?
      reinterpret_cast<const MoveArmJointServoT *>(value) : nullptr;
  }
  MoveArmCartesianServoT *AsMoveArmCartesianServo() {
    return type == ArmState::MoveArmCartesianServo ?
      reinterpret_cast<MoveArmCartesianServoT *>(value) : nullptr;
  }
  const MoveArmCartesianServoT *AsMoveArmCartesianServo() const {
    return type == ArmState::MoveArmCartesianServo ?
      reinterpret_cast<const MoveArmCartesianServoT *>(value) : nullptr;
  }
};

bool VerifyArmState(flatbuffers::Verifier &verifier, const void *obj, ArmState type);
bool VerifyArmStateVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct StartArmT : public flatbuffers::NativeTable {
  typedef StartArm TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.StartArmT";
  }
  StartArmT() {
  }
};

struct StartArm FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef StartArmT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.StartArm";
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  StartArmT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(StartArmT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<StartArm> Pack(flatbuffers::FlatBufferBuilder &_fbb, const StartArmT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct StartArmBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit StartArmBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StartArmBuilder &operator=(const StartArmBuilder &);
  flatbuffers::Offset<StartArm> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StartArm>(end);
    return o;
  }
};

inline flatbuffers::Offset<StartArm> CreateStartArm(
    flatbuffers::FlatBufferBuilder &_fbb) {
  StartArmBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<StartArm> CreateStartArm(flatbuffers::FlatBufferBuilder &_fbb, const StartArmT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct StopArmT : public flatbuffers::NativeTable {
  typedef StopArm TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.StopArmT";
  }
  StopArmT() {
  }
};

struct StopArm FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef StopArmT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.StopArm";
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  StopArmT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(StopArmT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<StopArm> Pack(flatbuffers::FlatBufferBuilder &_fbb, const StopArmT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct StopArmBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit StopArmBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StopArmBuilder &operator=(const StopArmBuilder &);
  flatbuffers::Offset<StopArm> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StopArm>(end);
    return o;
  }
};

inline flatbuffers::Offset<StopArm> CreateStopArm(
    flatbuffers::FlatBufferBuilder &_fbb) {
  StopArmBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<StopArm> CreateStopArm(flatbuffers::FlatBufferBuilder &_fbb, const StopArmT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PauseArmT : public flatbuffers::NativeTable {
  typedef PauseArm TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.PauseArmT";
  }
  PauseArmT() {
  }
};

struct PauseArm FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PauseArmT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.PauseArm";
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  PauseArmT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PauseArmT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PauseArm> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PauseArmT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PauseArmBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit PauseArmBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PauseArmBuilder &operator=(const PauseArmBuilder &);
  flatbuffers::Offset<PauseArm> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PauseArm>(end);
    return o;
  }
};

inline flatbuffers::Offset<PauseArm> CreatePauseArm(
    flatbuffers::FlatBufferBuilder &_fbb) {
  PauseArmBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<PauseArm> CreatePauseArm(flatbuffers::FlatBufferBuilder &_fbb, const PauseArmT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TeachArmT : public flatbuffers::NativeTable {
  typedef TeachArm TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.TeachArmT";
  }
  TeachArmT() {
  }
};

struct TeachArm FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TeachArmT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.TeachArm";
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  TeachArmT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TeachArmT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TeachArm> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TeachArmT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TeachArmBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit TeachArmBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TeachArmBuilder &operator=(const TeachArmBuilder &);
  flatbuffers::Offset<TeachArm> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TeachArm>(end);
    return o;
  }
};

inline flatbuffers::Offset<TeachArm> CreateTeachArm(
    flatbuffers::FlatBufferBuilder &_fbb) {
  TeachArmBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<TeachArm> CreateTeachArm(flatbuffers::FlatBufferBuilder &_fbb, const TeachArmT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ShutdownArmT : public flatbuffers::NativeTable {
  typedef ShutdownArm TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.ShutdownArmT";
  }
  ShutdownArmT() {
  }
};

struct ShutdownArm FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ShutdownArmT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.ShutdownArm";
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  ShutdownArmT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ShutdownArmT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ShutdownArm> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ShutdownArmT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ShutdownArmBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit ShutdownArmBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShutdownArmBuilder &operator=(const ShutdownArmBuilder &);
  flatbuffers::Offset<ShutdownArm> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShutdownArm>(end);
    return o;
  }
};

inline flatbuffers::Offset<ShutdownArm> CreateShutdownArm(
    flatbuffers::FlatBufferBuilder &_fbb) {
  ShutdownArmBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<ShutdownArm> CreateShutdownArm(flatbuffers::FlatBufferBuilder &_fbb, const ShutdownArmT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct MoveArmTrajectoryT : public flatbuffers::NativeTable {
  typedef MoveArmTrajectory TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.MoveArmTrajectoryT";
  }
  std::vector<std::unique_ptr<JointStateT>> traj;
  MoveArmTrajectoryT() {
  }
};

struct MoveArmTrajectory FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MoveArmTrajectoryT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.MoveArmTrajectory";
  }
  enum {
    VT_TRAJ = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<JointState>> *traj() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<JointState>> *>(VT_TRAJ);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TRAJ) &&
           verifier.Verify(traj()) &&
           verifier.VerifyVectorOfTables(traj()) &&
           verifier.EndTable();
  }
  MoveArmTrajectoryT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MoveArmTrajectoryT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<MoveArmTrajectory> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MoveArmTrajectoryT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MoveArmTrajectoryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_traj(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JointState>>> traj) {
    fbb_.AddOffset(MoveArmTrajectory::VT_TRAJ, traj);
  }
  explicit MoveArmTrajectoryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MoveArmTrajectoryBuilder &operator=(const MoveArmTrajectoryBuilder &);
  flatbuffers::Offset<MoveArmTrajectory> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MoveArmTrajectory>(end);
    return o;
  }
};

inline flatbuffers::Offset<MoveArmTrajectory> CreateMoveArmTrajectory(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<JointState>>> traj = 0) {
  MoveArmTrajectoryBuilder builder_(_fbb);
  builder_.add_traj(traj);
  return builder_.Finish();
}

inline flatbuffers::Offset<MoveArmTrajectory> CreateMoveArmTrajectoryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<JointState>> *traj = nullptr) {
  return grl::flatbuffer::CreateMoveArmTrajectory(
      _fbb,
      traj ? _fbb.CreateVector<flatbuffers::Offset<JointState>>(*traj) : 0);
}

flatbuffers::Offset<MoveArmTrajectory> CreateMoveArmTrajectory(flatbuffers::FlatBufferBuilder &_fbb, const MoveArmTrajectoryT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct MoveArmJointServoT : public flatbuffers::NativeTable {
  typedef MoveArmJointServo TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.MoveArmJointServoT";
  }
  std::unique_ptr<JointStateT> goal;
  MoveArmJointServoT() {
  }
};

struct MoveArmJointServo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MoveArmJointServoT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.MoveArmJointServo";
  }
  enum {
    VT_GOAL = 4
  };
  const JointState *goal() const {
    return GetPointer<const JointState *>(VT_GOAL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GOAL) &&
           verifier.VerifyTable(goal()) &&
           verifier.EndTable();
  }
  MoveArmJointServoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MoveArmJointServoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<MoveArmJointServo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MoveArmJointServoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MoveArmJointServoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_goal(flatbuffers::Offset<JointState> goal) {
    fbb_.AddOffset(MoveArmJointServo::VT_GOAL, goal);
  }
  explicit MoveArmJointServoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MoveArmJointServoBuilder &operator=(const MoveArmJointServoBuilder &);
  flatbuffers::Offset<MoveArmJointServo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MoveArmJointServo>(end);
    return o;
  }
};

inline flatbuffers::Offset<MoveArmJointServo> CreateMoveArmJointServo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<JointState> goal = 0) {
  MoveArmJointServoBuilder builder_(_fbb);
  builder_.add_goal(goal);
  return builder_.Finish();
}

flatbuffers::Offset<MoveArmJointServo> CreateMoveArmJointServo(flatbuffers::FlatBufferBuilder &_fbb, const MoveArmJointServoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct MoveArmCartesianServoT : public flatbuffers::NativeTable {
  typedef MoveArmCartesianServo TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.MoveArmCartesianServoT";
  }
  std::string parent;
  std::unique_ptr<Pose> goal;
  MoveArmCartesianServoT() {
  }
};

struct MoveArmCartesianServo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MoveArmCartesianServoT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.MoveArmCartesianServo";
  }
  enum {
    VT_PARENT = 4,
    VT_GOAL = 6
  };
  const flatbuffers::String *parent() const {
    return GetPointer<const flatbuffers::String *>(VT_PARENT);
  }
  const Pose *goal() const {
    return GetStruct<const Pose *>(VT_GOAL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PARENT) &&
           verifier.Verify(parent()) &&
           VerifyField<Pose>(verifier, VT_GOAL) &&
           verifier.EndTable();
  }
  MoveArmCartesianServoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MoveArmCartesianServoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<MoveArmCartesianServo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MoveArmCartesianServoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MoveArmCartesianServoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_parent(flatbuffers::Offset<flatbuffers::String> parent) {
    fbb_.AddOffset(MoveArmCartesianServo::VT_PARENT, parent);
  }
  void add_goal(const Pose *goal) {
    fbb_.AddStruct(MoveArmCartesianServo::VT_GOAL, goal);
  }
  explicit MoveArmCartesianServoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MoveArmCartesianServoBuilder &operator=(const MoveArmCartesianServoBuilder &);
  flatbuffers::Offset<MoveArmCartesianServo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MoveArmCartesianServo>(end);
    return o;
  }
};

inline flatbuffers::Offset<MoveArmCartesianServo> CreateMoveArmCartesianServo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> parent = 0,
    const Pose *goal = 0) {
  MoveArmCartesianServoBuilder builder_(_fbb);
  builder_.add_goal(goal);
  builder_.add_parent(parent);
  return builder_.Finish();
}

inline flatbuffers::Offset<MoveArmCartesianServo> CreateMoveArmCartesianServoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *parent = nullptr,
    const Pose *goal = 0) {
  return grl::flatbuffer::CreateMoveArmCartesianServo(
      _fbb,
      parent ? _fbb.CreateString(parent) : 0,
      goal);
}

flatbuffers::Offset<MoveArmCartesianServo> CreateMoveArmCartesianServo(flatbuffers::FlatBufferBuilder &_fbb, const MoveArmCartesianServoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ArmControlStateT : public flatbuffers::NativeTable {
  typedef ArmControlState TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.ArmControlStateT";
  }
  std::string name;
  int64_t sequenceNumber;
  double timeStamp;
  ArmStateUnion state;
  ArmControlStateT()
      : sequenceNumber(0),
        timeStamp(0.0) {
  }
};

struct ArmControlState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ArmControlStateT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.ArmControlState";
  }
  enum {
    VT_NAME = 4,
    VT_SEQUENCENUMBER = 6,
    VT_TIMESTAMP = 8,
    VT_STATE_TYPE = 10,
    VT_STATE = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int64_t sequenceNumber() const {
    return GetField<int64_t>(VT_SEQUENCENUMBER, 0);
  }
  double timeStamp() const {
    return GetField<double>(VT_TIMESTAMP, 0.0);
  }
  ArmState state_type() const {
    return static_cast<ArmState>(GetField<uint8_t>(VT_STATE_TYPE, 0));
  }
  const void *state() const {
    return GetPointer<const void *>(VT_STATE);
  }
  template<typename T> const T *state_as() const;
  const StartArm *state_as_StartArm() const {
    return state_type() == ArmState::StartArm ? static_cast<const StartArm *>(state()) : nullptr;
  }
  const StopArm *state_as_StopArm() const {
    return state_type() == ArmState::StopArm ? static_cast<const StopArm *>(state()) : nullptr;
  }
  const PauseArm *state_as_PauseArm() const {
    return state_type() == ArmState::PauseArm ? static_cast<const PauseArm *>(state()) : nullptr;
  }
  const ShutdownArm *state_as_ShutdownArm() const {
    return state_type() == ArmState::ShutdownArm ? static_cast<const ShutdownArm *>(state()) : nullptr;
  }
  const TeachArm *state_as_TeachArm() const {
    return state_type() == ArmState::TeachArm ? static_cast<const TeachArm *>(state()) : nullptr;
  }
  const MoveArmTrajectory *state_as_MoveArmTrajectory() const {
    return state_type() == ArmState::MoveArmTrajectory ? static_cast<const MoveArmTrajectory *>(state()) : nullptr;
  }
  const MoveArmJointServo *state_as_MoveArmJointServo() const {
    return state_type() == ArmState::MoveArmJointServo ? static_cast<const MoveArmJointServo *>(state()) : nullptr;
  }
  const MoveArmCartesianServo *state_as_MoveArmCartesianServo() const {
    return state_type() == ArmState::MoveArmCartesianServo ? static_cast<const MoveArmCartesianServo *>(state()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int64_t>(verifier, VT_SEQUENCENUMBER) &&
           VerifyField<double>(verifier, VT_TIMESTAMP) &&
           VerifyField<uint8_t>(verifier, VT_STATE_TYPE) &&
           VerifyOffset(verifier, VT_STATE) &&
           VerifyArmState(verifier, state(), state_type()) &&
           verifier.EndTable();
  }
  ArmControlStateT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ArmControlStateT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ArmControlState> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ArmControlStateT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const StartArm *ArmControlState::state_as<StartArm>() const {
  return state_as_StartArm();
}

template<> inline const StopArm *ArmControlState::state_as<StopArm>() const {
  return state_as_StopArm();
}

template<> inline const PauseArm *ArmControlState::state_as<PauseArm>() const {
  return state_as_PauseArm();
}

template<> inline const ShutdownArm *ArmControlState::state_as<ShutdownArm>() const {
  return state_as_ShutdownArm();
}

template<> inline const TeachArm *ArmControlState::state_as<TeachArm>() const {
  return state_as_TeachArm();
}

template<> inline const MoveArmTrajectory *ArmControlState::state_as<MoveArmTrajectory>() const {
  return state_as_MoveArmTrajectory();
}

template<> inline const MoveArmJointServo *ArmControlState::state_as<MoveArmJointServo>() const {
  return state_as_MoveArmJointServo();
}

template<> inline const MoveArmCartesianServo *ArmControlState::state_as<MoveArmCartesianServo>() const {
  return state_as_MoveArmCartesianServo();
}

struct ArmControlStateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ArmControlState::VT_NAME, name);
  }
  void add_sequenceNumber(int64_t sequenceNumber) {
    fbb_.AddElement<int64_t>(ArmControlState::VT_SEQUENCENUMBER, sequenceNumber, 0);
  }
  void add_timeStamp(double timeStamp) {
    fbb_.AddElement<double>(ArmControlState::VT_TIMESTAMP, timeStamp, 0.0);
  }
  void add_state_type(ArmState state_type) {
    fbb_.AddElement<uint8_t>(ArmControlState::VT_STATE_TYPE, static_cast<uint8_t>(state_type), 0);
  }
  void add_state(flatbuffers::Offset<void> state) {
    fbb_.AddOffset(ArmControlState::VT_STATE, state);
  }
  explicit ArmControlStateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArmControlStateBuilder &operator=(const ArmControlStateBuilder &);
  flatbuffers::Offset<ArmControlState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArmControlState>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArmControlState> CreateArmControlState(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int64_t sequenceNumber = 0,
    double timeStamp = 0.0,
    ArmState state_type = ArmState::NONE,
    flatbuffers::Offset<void> state = 0) {
  ArmControlStateBuilder builder_(_fbb);
  builder_.add_timeStamp(timeStamp);
  builder_.add_sequenceNumber(sequenceNumber);
  builder_.add_state(state);
  builder_.add_name(name);
  builder_.add_state_type(state_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArmControlState> CreateArmControlStateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int64_t sequenceNumber = 0,
    double timeStamp = 0.0,
    ArmState state_type = ArmState::NONE,
    flatbuffers::Offset<void> state = 0) {
  return grl::flatbuffer::CreateArmControlState(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      sequenceNumber,
      timeStamp,
      state_type,
      state);
}

flatbuffers::Offset<ArmControlState> CreateArmControlState(flatbuffers::FlatBufferBuilder &_fbb, const ArmControlStateT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ArmControlSeriesT : public flatbuffers::NativeTable {
  typedef ArmControlSeries TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.ArmControlSeriesT";
  }
  std::vector<std::unique_ptr<ArmControlStateT>> states;
  ArmControlSeriesT() {
  }
};

struct ArmControlSeries FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ArmControlSeriesT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.ArmControlSeries";
  }
  enum {
    VT_STATES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<ArmControlState>> *states() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ArmControlState>> *>(VT_STATES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STATES) &&
           verifier.Verify(states()) &&
           verifier.VerifyVectorOfTables(states()) &&
           verifier.EndTable();
  }
  ArmControlSeriesT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ArmControlSeriesT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ArmControlSeries> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ArmControlSeriesT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ArmControlSeriesBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_states(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ArmControlState>>> states) {
    fbb_.AddOffset(ArmControlSeries::VT_STATES, states);
  }
  explicit ArmControlSeriesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ArmControlSeriesBuilder &operator=(const ArmControlSeriesBuilder &);
  flatbuffers::Offset<ArmControlSeries> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ArmControlSeries>(end);
    return o;
  }
};

inline flatbuffers::Offset<ArmControlSeries> CreateArmControlSeries(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ArmControlState>>> states = 0) {
  ArmControlSeriesBuilder builder_(_fbb);
  builder_.add_states(states);
  return builder_.Finish();
}

inline flatbuffers::Offset<ArmControlSeries> CreateArmControlSeriesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<ArmControlState>> *states = nullptr) {
  return grl::flatbuffer::CreateArmControlSeries(
      _fbb,
      states ? _fbb.CreateVector<flatbuffers::Offset<ArmControlState>>(*states) : 0);
}

flatbuffers::Offset<ArmControlSeries> CreateArmControlSeries(flatbuffers::FlatBufferBuilder &_fbb, const ArmControlSeriesT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline StartArmT *StartArm::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new StartArmT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void StartArm::UnPackTo(StartArmT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<StartArm> StartArm::Pack(flatbuffers::FlatBufferBuilder &_fbb, const StartArmT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateStartArm(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<StartArm> CreateStartArm(flatbuffers::FlatBufferBuilder &_fbb, const StartArmT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const StartArmT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return grl::flatbuffer::CreateStartArm(
      _fbb);
}

inline StopArmT *StopArm::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new StopArmT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void StopArm::UnPackTo(StopArmT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<StopArm> StopArm::Pack(flatbuffers::FlatBufferBuilder &_fbb, const StopArmT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateStopArm(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<StopArm> CreateStopArm(flatbuffers::FlatBufferBuilder &_fbb, const StopArmT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const StopArmT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return grl::flatbuffer::CreateStopArm(
      _fbb);
}

inline PauseArmT *PauseArm::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new PauseArmT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void PauseArm::UnPackTo(PauseArmT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<PauseArm> PauseArm::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PauseArmT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePauseArm(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PauseArm> CreatePauseArm(flatbuffers::FlatBufferBuilder &_fbb, const PauseArmT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PauseArmT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return grl::flatbuffer::CreatePauseArm(
      _fbb);
}

inline TeachArmT *TeachArm::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new TeachArmT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void TeachArm::UnPackTo(TeachArmT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<TeachArm> TeachArm::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TeachArmT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTeachArm(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TeachArm> CreateTeachArm(flatbuffers::FlatBufferBuilder &_fbb, const TeachArmT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TeachArmT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return grl::flatbuffer::CreateTeachArm(
      _fbb);
}

inline ShutdownArmT *ShutdownArm::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new ShutdownArmT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void ShutdownArm::UnPackTo(ShutdownArmT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<ShutdownArm> ShutdownArm::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ShutdownArmT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateShutdownArm(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ShutdownArm> CreateShutdownArm(flatbuffers::FlatBufferBuilder &_fbb, const ShutdownArmT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ShutdownArmT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return grl::flatbuffer::CreateShutdownArm(
      _fbb);
}

inline MoveArmTrajectoryT *MoveArmTrajectory::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new MoveArmTrajectoryT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void MoveArmTrajectory::UnPackTo(MoveArmTrajectoryT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = traj(); if (_e) { _o->traj.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->traj[_i] = std::unique_ptr<JointStateT>(_e->Get(_i)->UnPack(_resolver)); } } };
}

inline flatbuffers::Offset<MoveArmTrajectory> MoveArmTrajectory::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MoveArmTrajectoryT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMoveArmTrajectory(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<MoveArmTrajectory> CreateMoveArmTrajectory(flatbuffers::FlatBufferBuilder &_fbb, const MoveArmTrajectoryT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MoveArmTrajectoryT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _traj = _o->traj.size() ? _fbb.CreateVector<flatbuffers::Offset<JointState>> (_o->traj.size(), [](size_t i, _VectorArgs *__va) { return CreateJointState(*__va->__fbb, __va->__o->traj[i].get(), __va->__rehasher); }, &_va ) : 0;
  return grl::flatbuffer::CreateMoveArmTrajectory(
      _fbb,
      _traj);
}

inline MoveArmJointServoT *MoveArmJointServo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new MoveArmJointServoT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void MoveArmJointServo::UnPackTo(MoveArmJointServoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = goal(); if (_e) _o->goal = std::unique_ptr<JointStateT>(_e->UnPack(_resolver)); };
}

inline flatbuffers::Offset<MoveArmJointServo> MoveArmJointServo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MoveArmJointServoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMoveArmJointServo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<MoveArmJointServo> CreateMoveArmJointServo(flatbuffers::FlatBufferBuilder &_fbb, const MoveArmJointServoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MoveArmJointServoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _goal = _o->goal ? CreateJointState(_fbb, _o->goal.get(), _rehasher) : 0;
  return grl::flatbuffer::CreateMoveArmJointServo(
      _fbb,
      _goal);
}

inline MoveArmCartesianServoT *MoveArmCartesianServo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new MoveArmCartesianServoT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void MoveArmCartesianServo::UnPackTo(MoveArmCartesianServoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = parent(); if (_e) _o->parent = _e->str(); };
  { auto _e = goal(); if (_e) _o->goal = std::unique_ptr<Pose>(new Pose(*_e)); };
}

inline flatbuffers::Offset<MoveArmCartesianServo> MoveArmCartesianServo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MoveArmCartesianServoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMoveArmCartesianServo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<MoveArmCartesianServo> CreateMoveArmCartesianServo(flatbuffers::FlatBufferBuilder &_fbb, const MoveArmCartesianServoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MoveArmCartesianServoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _parent = _o->parent.empty() ? 0 : _fbb.CreateString(_o->parent);
  auto _goal = _o->goal ? _o->goal.get() : 0;
  return grl::flatbuffer::CreateMoveArmCartesianServo(
      _fbb,
      _parent,
      _goal);
}

inline ArmControlStateT *ArmControlState::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new ArmControlStateT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void ArmControlState::UnPackTo(ArmControlStateT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); };
  { auto _e = sequenceNumber(); _o->sequenceNumber = _e; };
  { auto _e = timeStamp(); _o->timeStamp = _e; };
  { auto _e = state_type(); _o->state.type = _e; };
  { auto _e = state(); if (_e) _o->state.value = ArmStateUnion::UnPack(_e, state_type(), _resolver); };
}

inline flatbuffers::Offset<ArmControlState> ArmControlState::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ArmControlStateT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateArmControlState(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ArmControlState> CreateArmControlState(flatbuffers::FlatBufferBuilder &_fbb, const ArmControlStateT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ArmControlStateT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _sequenceNumber = _o->sequenceNumber;
  auto _timeStamp = _o->timeStamp;
  auto _state_type = _o->state.type;
  auto _state = _o->state.Pack(_fbb);
  return grl::flatbuffer::CreateArmControlState(
      _fbb,
      _name,
      _sequenceNumber,
      _timeStamp,
      _state_type,
      _state);
}

inline ArmControlSeriesT *ArmControlSeries::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new ArmControlSeriesT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void ArmControlSeries::UnPackTo(ArmControlSeriesT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = states(); if (_e) { _o->states.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->states[_i] = std::unique_ptr<ArmControlStateT>(_e->Get(_i)->UnPack(_resolver)); } } };
}

inline flatbuffers::Offset<ArmControlSeries> ArmControlSeries::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ArmControlSeriesT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateArmControlSeries(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ArmControlSeries> CreateArmControlSeries(flatbuffers::FlatBufferBuilder &_fbb, const ArmControlSeriesT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ArmControlSeriesT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _states = _o->states.size() ? _fbb.CreateVector<flatbuffers::Offset<ArmControlState>> (_o->states.size(), [](size_t i, _VectorArgs *__va) { return CreateArmControlState(*__va->__fbb, __va->__o->states[i].get(), __va->__rehasher); }, &_va ) : 0;
  return grl::flatbuffer::CreateArmControlSeries(
      _fbb,
      _states);
}

inline bool VerifyArmState(flatbuffers::Verifier &verifier, const void *obj, ArmState type) {
  switch (type) {
    case ArmState::NONE: {
      return true;
    }
    case ArmState::StartArm: {
      auto ptr = reinterpret_cast<const StartArm *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ArmState::StopArm: {
      auto ptr = reinterpret_cast<const StopArm *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ArmState::PauseArm: {
      auto ptr = reinterpret_cast<const PauseArm *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ArmState::ShutdownArm: {
      auto ptr = reinterpret_cast<const ShutdownArm *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ArmState::TeachArm: {
      auto ptr = reinterpret_cast<const TeachArm *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ArmState::MoveArmTrajectory: {
      auto ptr = reinterpret_cast<const MoveArmTrajectory *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ArmState::MoveArmJointServo: {
      auto ptr = reinterpret_cast<const MoveArmJointServo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ArmState::MoveArmCartesianServo: {
      auto ptr = reinterpret_cast<const MoveArmCartesianServo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyArmStateVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyArmState(
        verifier,  values->Get(i), types->GetEnum<ArmState>(i))) {
      return false;
    }
  }
  return true;
}

inline void *ArmStateUnion::UnPack(const void *obj, ArmState type, const flatbuffers::resolver_function_t *resolver) {
  switch (type) {
    case ArmState::StartArm: {
      auto ptr = reinterpret_cast<const StartArm *>(obj);
      return ptr->UnPack(resolver);
    }
    case ArmState::StopArm: {
      auto ptr = reinterpret_cast<const StopArm *>(obj);
      return ptr->UnPack(resolver);
    }
    case ArmState::PauseArm: {
      auto ptr = reinterpret_cast<const PauseArm *>(obj);
      return ptr->UnPack(resolver);
    }
    case ArmState::ShutdownArm: {
      auto ptr = reinterpret_cast<const ShutdownArm *>(obj);
      return ptr->UnPack(resolver);
    }
    case ArmState::TeachArm: {
      auto ptr = reinterpret_cast<const TeachArm *>(obj);
      return ptr->UnPack(resolver);
    }
    case ArmState::MoveArmTrajectory: {
      auto ptr = reinterpret_cast<const MoveArmTrajectory *>(obj);
      return ptr->UnPack(resolver);
    }
    case ArmState::MoveArmJointServo: {
      auto ptr = reinterpret_cast<const MoveArmJointServo *>(obj);
      return ptr->UnPack(resolver);
    }
    case ArmState::MoveArmCartesianServo: {
      auto ptr = reinterpret_cast<const MoveArmCartesianServo *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline flatbuffers::Offset<void> ArmStateUnion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher) const {
  switch (type) {
    case ArmState::StartArm: {
      auto ptr = reinterpret_cast<const StartArmT *>(value);
      return CreateStartArm(_fbb, ptr, _rehasher).Union();
    }
    case ArmState::StopArm: {
      auto ptr = reinterpret_cast<const StopArmT *>(value);
      return CreateStopArm(_fbb, ptr, _rehasher).Union();
    }
    case ArmState::PauseArm: {
      auto ptr = reinterpret_cast<const PauseArmT *>(value);
      return CreatePauseArm(_fbb, ptr, _rehasher).Union();
    }
    case ArmState::ShutdownArm: {
      auto ptr = reinterpret_cast<const ShutdownArmT *>(value);
      return CreateShutdownArm(_fbb, ptr, _rehasher).Union();
    }
    case ArmState::TeachArm: {
      auto ptr = reinterpret_cast<const TeachArmT *>(value);
      return CreateTeachArm(_fbb, ptr, _rehasher).Union();
    }
    case ArmState::MoveArmTrajectory: {
      auto ptr = reinterpret_cast<const MoveArmTrajectoryT *>(value);
      return CreateMoveArmTrajectory(_fbb, ptr, _rehasher).Union();
    }
    case ArmState::MoveArmJointServo: {
      auto ptr = reinterpret_cast<const MoveArmJointServoT *>(value);
      return CreateMoveArmJointServo(_fbb, ptr, _rehasher).Union();
    }
    case ArmState::MoveArmCartesianServo: {
      auto ptr = reinterpret_cast<const MoveArmCartesianServoT *>(value);
      return CreateMoveArmCartesianServo(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline ArmStateUnion::ArmStateUnion(const ArmStateUnion &u) FLATBUFFERS_NOEXCEPT : type(u.type), value(nullptr) {
  switch (type) {
    case ArmState::StartArm: {
      value = new StartArmT(*reinterpret_cast<StartArmT *>(u.value));
      break;
    }
    case ArmState::StopArm: {
      value = new StopArmT(*reinterpret_cast<StopArmT *>(u.value));
      break;
    }
    case ArmState::PauseArm: {
      value = new PauseArmT(*reinterpret_cast<PauseArmT *>(u.value));
      break;
    }
    case ArmState::ShutdownArm: {
      value = new ShutdownArmT(*reinterpret_cast<ShutdownArmT *>(u.value));
      break;
    }
    case ArmState::TeachArm: {
      value = new TeachArmT(*reinterpret_cast<TeachArmT *>(u.value));
      break;
    }
    case ArmState::MoveArmTrajectory: {
      assert(false);  // MoveArmTrajectoryT not copyable.
      break;
    }
    case ArmState::MoveArmJointServo: {
      assert(false);  // MoveArmJointServoT not copyable.
      break;
    }
    case ArmState::MoveArmCartesianServo: {
      assert(false);  // MoveArmCartesianServoT not copyable.
      break;
    }
    default:
      break;
  }
}

inline void ArmStateUnion::Reset() {
  switch (type) {
    case ArmState::StartArm: {
      auto ptr = reinterpret_cast<StartArmT *>(value);
      delete ptr;
      break;
    }
    case ArmState::StopArm: {
      auto ptr = reinterpret_cast<StopArmT *>(value);
      delete ptr;
      break;
    }
    case ArmState::PauseArm: {
      auto ptr = reinterpret_cast<PauseArmT *>(value);
      delete ptr;
      break;
    }
    case ArmState::ShutdownArm: {
      auto ptr = reinterpret_cast<ShutdownArmT *>(value);
      delete ptr;
      break;
    }
    case ArmState::TeachArm: {
      auto ptr = reinterpret_cast<TeachArmT *>(value);
      delete ptr;
      break;
    }
    case ArmState::MoveArmTrajectory: {
      auto ptr = reinterpret_cast<MoveArmTrajectoryT *>(value);
      delete ptr;
      break;
    }
    case ArmState::MoveArmJointServo: {
      auto ptr = reinterpret_cast<MoveArmJointServoT *>(value);
      delete ptr;
      break;
    }
    case ArmState::MoveArmCartesianServo: {
      auto ptr = reinterpret_cast<MoveArmCartesianServoT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = ArmState::NONE;
}

inline const grl::flatbuffer::ArmControlSeries *GetArmControlSeries(const void *buf) {
  return flatbuffers::GetRoot<grl::flatbuffer::ArmControlSeries>(buf);
}

inline const grl::flatbuffer::ArmControlSeries *GetSizePrefixedArmControlSeries(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<grl::flatbuffer::ArmControlSeries>(buf);
}

inline const char *ArmControlSeriesIdentifier() {
  return "armc";
}

inline bool ArmControlSeriesBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ArmControlSeriesIdentifier());
}

inline bool VerifyArmControlSeriesBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<grl::flatbuffer::ArmControlSeries>(ArmControlSeriesIdentifier());
}

inline bool VerifySizePrefixedArmControlSeriesBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<grl::flatbuffer::ArmControlSeries>(ArmControlSeriesIdentifier());
}

inline const char *ArmControlSeriesExtension() {
  return "armc";
}

inline void FinishArmControlSeriesBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<grl::flatbuffer::ArmControlSeries> root) {
  fbb.Finish(root, ArmControlSeriesIdentifier());
}

inline void FinishSizePrefixedArmControlSeriesBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<grl::flatbuffer::ArmControlSeries> root) {
  fbb.FinishSizePrefixed(root, ArmControlSeriesIdentifier());
}

inline std::unique_ptr<ArmControlSeriesT> UnPackArmControlSeries(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ArmControlSeriesT>(GetArmControlSeries(buf)->UnPack(res));
}

}  // namespace flatbuffer
}  // namespace grl

#endif  // FLATBUFFERS_GENERATED_ARMCONTROLSTATE_GRL_FLATBUFFER_H_
