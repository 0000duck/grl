# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers

class FusionTrackParameters(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFusionTrackParameters(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FusionTrackParameters()
        x.Init(buf, n + offset)
        return x

    # FusionTrackParameters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// Name for this connection / FusionTrack driver instance
# /// useful for debugging and when multiple data sources are used
    # FusionTrackParameters
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

# /// Name for the clock on the FusionTrack
# /// Useful for timing calculations and debugging.
    # FusionTrackParameters
    def DeviceClockID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

# /// Name for the local clock on which this driver runs
# /// Useful for timing calculations and debugging.
    # FusionTrackParameters
    def LocalClockID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

# /// dimensions of the markers that may be present
    # FusionTrackParameters
    def Geometries(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ftkGeometry import ftkGeometry
            obj = ftkGeometry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FusionTrackParameters
    def GeometriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// Geometries aka fiducials aka markers to be loaded from ini files.
# /// The data loaded should not repeat IDs from MarkerIDs.
    # FusionTrackParameters
    def GeometryFilenames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FusionTrackParameters
    def GeometryFilenamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// Path to the directory with the marker ini files listed above
# /// Uses the default current working directory if empty
# /// geometryDir:[string];
    # FusionTrackParameters
    def GeometryDir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

# /// Optional list of optical tracker device ids to expect
# /// will be loaded automatically if empty
    # FusionTrackParameters
    def TrackerDeviceIDs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FusionTrackParameters
    def TrackerDeviceIDsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # FusionTrackParameters
    def TrackerDeviceIDsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// Marker geometry unique integer IDs
    # FusionTrackParameters
    def MarkerIDs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FusionTrackParameters
    def MarkerIDsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # FusionTrackParameters
    def MarkerIDsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// Optional Marker geometry names with one for each ID, none otherwise
    # FusionTrackParameters
    def MarkerNames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FusionTrackParameters
    def MarkerNamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FusionTrackParameters
    def MDeviceSerialNumbers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FusionTrackParameters
    def MDeviceSerialNumbersAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # FusionTrackParameters
    def MDeviceSerialNumbersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FusionTrackParameters
    def MDeviceTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # FusionTrackParameters
    def MDeviceTypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # FusionTrackParameters
    def MDeviceTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def FusionTrackParametersStart(builder): builder.StartObject(11)
def FusionTrackParametersAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def FusionTrackParametersAddDeviceClockID(builder, deviceClockID): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(deviceClockID), 0)
def FusionTrackParametersAddLocalClockID(builder, localClockID): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(localClockID), 0)
def FusionTrackParametersAddGeometries(builder, geometries): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(geometries), 0)
def FusionTrackParametersStartGeometriesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FusionTrackParametersAddGeometryFilenames(builder, geometryFilenames): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(geometryFilenames), 0)
def FusionTrackParametersStartGeometryFilenamesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FusionTrackParametersAddGeometryDir(builder, geometryDir): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(geometryDir), 0)
def FusionTrackParametersAddTrackerDeviceIDs(builder, TrackerDeviceIDs): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(TrackerDeviceIDs), 0)
def FusionTrackParametersStartTrackerDeviceIDsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FusionTrackParametersAddMarkerIDs(builder, markerIDs): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(markerIDs), 0)
def FusionTrackParametersStartMarkerIDsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FusionTrackParametersAddMarkerNames(builder, markerNames): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(markerNames), 0)
def FusionTrackParametersStartMarkerNamesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FusionTrackParametersAddMDeviceSerialNumbers(builder, mDeviceSerialNumbers): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(mDeviceSerialNumbers), 0)
def FusionTrackParametersStartMDeviceSerialNumbersVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FusionTrackParametersAddMDeviceTypes(builder, mDeviceTypes): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(mDeviceTypes), 0)
def FusionTrackParametersStartMDeviceTypesVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def FusionTrackParametersEnd(builder): return builder.EndObject()
