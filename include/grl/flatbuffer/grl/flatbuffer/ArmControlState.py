# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers

class ArmControlState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsArmControlState(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArmControlState()
        x.Init(buf, n + offset)
        return x

    # ArmControlState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ArmControlState
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # ArmControlState
    def SequenceNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArmControlState
    def TimeStamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ArmControlState
    def StateType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ArmControlState
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def ArmControlStateStart(builder): builder.StartObject(5)
def ArmControlStateAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def ArmControlStateAddSequenceNumber(builder, sequenceNumber): builder.PrependInt64Slot(1, sequenceNumber, 0)
def ArmControlStateAddTimeStamp(builder, timeStamp): builder.PrependFloat64Slot(2, timeStamp, 0.0)
def ArmControlStateAddStateType(builder, stateType): builder.PrependUint8Slot(3, stateType, 0)
def ArmControlStateAddState(builder, state): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(state), 0)
def ArmControlStateEnd(builder): return builder.EndObject()
