# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers

# /// Data for one frame capture
# /// On the Atracsys FusionTrack optical tracker
# /// look at ftkInterface.h for details
# /// Frame class is defined in FusionTrack.hpp
class FusionTrackFrame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFusionTrackFrame(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FusionTrackFrame()
        x.Init(buf, n + offset)
        return x

    # FusionTrackFrame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FusionTrackFrame
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FusionTrackFrame
    def SerialNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def HardwareTimestampUS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def DesynchroUS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def Counter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def Format(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def ImageStrideInBytes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def ImageHeaderVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def ImageHeaderStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def ImageLeftPixels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # FusionTrackFrame
    def ImageLeftPixelsVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def ImageLeftStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def ImageRightPixels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # FusionTrackFrame
    def ImageRightPixelsVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def ImageRightStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def RegionsOfInterestLeft(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ftkRegionOfInterest import ftkRegionOfInterest
            obj = ftkRegionOfInterest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FusionTrackFrame
    def RegionsOfInterestLeftLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FusionTrackFrame
    def RegionsOfInterestLeftVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def RegionsOfInterestLeftStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def RegionsOfInterestRight(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ftkRegionOfInterest import ftkRegionOfInterest
            obj = ftkRegionOfInterest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FusionTrackFrame
    def RegionsOfInterestRightLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FusionTrackFrame
    def RegionsOfInterestRightVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def RegionsOfInterestRightStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def ThreeDFiducials(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ftk3DFiducial import ftk3DFiducial
            obj = ftk3DFiducial()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FusionTrackFrame
    def ThreeDFiducialsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FusionTrackFrame
    def ThreeDFiducialsVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def ThreeDFiducialsStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def Markers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ftkMarker import ftkMarker
            obj = ftkMarker()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FusionTrackFrame
    def MarkersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FusionTrackFrame
    def MarkersVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def MarkersStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def DeviceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FusionTrackFrame
    def FtkError(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def FusionTrackFrameStart(builder): builder.StartObject(31)
def FusionTrackFrameAddTimestamp(builder, timestamp): builder.PrependFloat64Slot(0, timestamp, 0.0)
def FusionTrackFrameAddSerialNumber(builder, serialNumber): builder.PrependUint64Slot(1, serialNumber, 0)
def FusionTrackFrameAddHardwareTimestampUS(builder, hardwareTimestampUS): builder.PrependUint64Slot(2, hardwareTimestampUS, 0)
def FusionTrackFrameAddDesynchroUS(builder, desynchroUS): builder.PrependUint64Slot(3, desynchroUS, 0)
def FusionTrackFrameAddCounter(builder, counter): builder.PrependUint32Slot(4, counter, 0)
def FusionTrackFrameAddFormat(builder, format): builder.PrependUint32Slot(5, format, 0)
def FusionTrackFrameAddWidth(builder, width): builder.PrependUint32Slot(6, width, 0)
def FusionTrackFrameAddHeight(builder, height): builder.PrependUint32Slot(7, height, 0)
def FusionTrackFrameAddImageStrideInBytes(builder, imageStrideInBytes): builder.PrependInt32Slot(8, imageStrideInBytes, 0)
def FusionTrackFrameAddImageHeaderVersion(builder, imageHeaderVersion): builder.PrependUint32Slot(9, imageHeaderVersion, 0)
def FusionTrackFrameAddImageHeaderStatus(builder, imageHeaderStatus): builder.PrependInt32Slot(10, imageHeaderStatus, 0)
def FusionTrackFrameAddImageLeftPixels(builder, imageLeftPixels): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(imageLeftPixels), 0)
def FusionTrackFrameAddImageLeftPixelsVersion(builder, imageLeftPixelsVersion): builder.PrependUint32Slot(12, imageLeftPixelsVersion, 0)
def FusionTrackFrameAddImageLeftStatus(builder, imageLeftStatus): builder.PrependInt32Slot(13, imageLeftStatus, 0)
def FusionTrackFrameAddImageRightPixels(builder, imageRightPixels): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(imageRightPixels), 0)
def FusionTrackFrameAddImageRightPixelsVersion(builder, imageRightPixelsVersion): builder.PrependUint32Slot(15, imageRightPixelsVersion, 0)
def FusionTrackFrameAddImageRightStatus(builder, imageRightStatus): builder.PrependInt32Slot(16, imageRightStatus, 0)
def FusionTrackFrameAddRegionsOfInterestLeft(builder, regionsOfInterestLeft): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(regionsOfInterestLeft), 0)
def FusionTrackFrameStartRegionsOfInterestLeftVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FusionTrackFrameAddRegionsOfInterestLeftVersion(builder, regionsOfInterestLeftVersion): builder.PrependUint32Slot(18, regionsOfInterestLeftVersion, 0)
def FusionTrackFrameAddRegionsOfInterestLeftStatus(builder, regionsOfInterestLeftStatus): builder.PrependInt32Slot(19, regionsOfInterestLeftStatus, 0)
def FusionTrackFrameAddRegionsOfInterestRight(builder, regionsOfInterestRight): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(regionsOfInterestRight), 0)
def FusionTrackFrameStartRegionsOfInterestRightVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FusionTrackFrameAddRegionsOfInterestRightVersion(builder, regionsOfInterestRightVersion): builder.PrependUint32Slot(21, regionsOfInterestRightVersion, 0)
def FusionTrackFrameAddRegionsOfInterestRightStatus(builder, regionsOfInterestRightStatus): builder.PrependInt32Slot(22, regionsOfInterestRightStatus, 0)
def FusionTrackFrameAddThreeDFiducials(builder, threeDFiducials): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(threeDFiducials), 0)
def FusionTrackFrameStartThreeDFiducialsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FusionTrackFrameAddThreeDFiducialsVersion(builder, threeDFiducialsVersion): builder.PrependUint32Slot(24, threeDFiducialsVersion, 0)
def FusionTrackFrameAddThreeDFiducialsStatus(builder, threeDFiducialsStatus): builder.PrependInt32Slot(25, threeDFiducialsStatus, 0)
def FusionTrackFrameAddMarkers(builder, markers): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(markers), 0)
def FusionTrackFrameStartMarkersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FusionTrackFrameAddMarkersVersion(builder, markersVersion): builder.PrependUint32Slot(27, markersVersion, 0)
def FusionTrackFrameAddMarkersStatus(builder, markersStatus): builder.PrependInt32Slot(28, markersStatus, 0)
def FusionTrackFrameAddDeviceType(builder, deviceType): builder.PrependInt32Slot(29, deviceType, 0)
def FusionTrackFrameAddFtkError(builder, ftkError): builder.PrependInt64Slot(30, ftkError, 0)
def FusionTrackFrameEnd(builder): return builder.EndObject()
