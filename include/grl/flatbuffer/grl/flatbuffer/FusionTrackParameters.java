// automatically generated by the FlatBuffers compiler, do not modify

package grl.flatbuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FusionTrackParameters extends Table {
  public static FusionTrackParameters getRootAsFusionTrackParameters(ByteBuffer _bb) { return getRootAsFusionTrackParameters(_bb, new FusionTrackParameters()); }
  public static FusionTrackParameters getRootAsFusionTrackParameters(ByteBuffer _bb, FusionTrackParameters obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public FusionTrackParameters __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Name for this connection / FusionTrack driver instance
   * useful for debugging and when multiple data sources are used
   */
  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Name for the clock on the FusionTrack
   * Useful for timing calculations and debugging.
   */
  public String deviceClockID() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer deviceClockIDAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer deviceClockIDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Name for the local clock on which this driver runs
   * Useful for timing calculations and debugging.
   */
  public String localClockID() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer localClockIDAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer localClockIDInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * dimensions of the markers that may be present
   */
  public ftkGeometry geometries(int j) { return geometries(new ftkGeometry(), j); }
  public ftkGeometry geometries(ftkGeometry obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int geometriesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  /**
   * Geometries aka fiducials aka markers to be loaded from ini files.
   * The data loaded should not repeat IDs from MarkerIDs.
   */
  public String geometryFilenames(int j) { int o = __offset(12); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int geometryFilenamesLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  /**
   * Path to the directory with the marker ini files listed above
   * Uses the default current working directory if empty
   * geometryDir:[string];
   */
  public String geometryDir() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer geometryDirAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer geometryDirInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Optional list of optical tracker device ids to expect
   * will be loaded automatically if empty
   */
  public long TrackerDeviceIDs(int j) { int o = __offset(16); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int TrackerDeviceIDsLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer TrackerDeviceIDsAsByteBuffer() { return __vector_as_bytebuffer(16, 8); }
  public ByteBuffer TrackerDeviceIDsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 8); }
  /**
   * Marker geometry unique integer IDs
   */
  public long markerIDs(int j) { int o = __offset(18); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int markerIDsLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer markerIDsAsByteBuffer() { return __vector_as_bytebuffer(18, 8); }
  public ByteBuffer markerIDsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 8); }
  /**
   * Optional Marker geometry names with one for each ID, none otherwise
   */
  public String markerNames(int j) { int o = __offset(20); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int markerNamesLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public long mDeviceSerialNumbers(int j) { int o = __offset(22); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int mDeviceSerialNumbersLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer mDeviceSerialNumbersAsByteBuffer() { return __vector_as_bytebuffer(22, 8); }
  public ByteBuffer mDeviceSerialNumbersInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 8); }
  public int mDeviceTypes(int j) { int o = __offset(24); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int mDeviceTypesLength() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer mDeviceTypesAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer mDeviceTypesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }

  public static int createFusionTrackParameters(FlatBufferBuilder builder,
      int nameOffset,
      int deviceClockIDOffset,
      int localClockIDOffset,
      int geometriesOffset,
      int geometryFilenamesOffset,
      int geometryDirOffset,
      int TrackerDeviceIDsOffset,
      int markerIDsOffset,
      int markerNamesOffset,
      int m_deviceSerialNumbersOffset,
      int m_device_typesOffset) {
    builder.startObject(11);
    FusionTrackParameters.addMDeviceTypes(builder, m_device_typesOffset);
    FusionTrackParameters.addMDeviceSerialNumbers(builder, m_deviceSerialNumbersOffset);
    FusionTrackParameters.addMarkerNames(builder, markerNamesOffset);
    FusionTrackParameters.addMarkerIDs(builder, markerIDsOffset);
    FusionTrackParameters.addTrackerDeviceIDs(builder, TrackerDeviceIDsOffset);
    FusionTrackParameters.addGeometryDir(builder, geometryDirOffset);
    FusionTrackParameters.addGeometryFilenames(builder, geometryFilenamesOffset);
    FusionTrackParameters.addGeometries(builder, geometriesOffset);
    FusionTrackParameters.addLocalClockID(builder, localClockIDOffset);
    FusionTrackParameters.addDeviceClockID(builder, deviceClockIDOffset);
    FusionTrackParameters.addName(builder, nameOffset);
    return FusionTrackParameters.endFusionTrackParameters(builder);
  }

  public static void startFusionTrackParameters(FlatBufferBuilder builder) { builder.startObject(11); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addDeviceClockID(FlatBufferBuilder builder, int deviceClockIDOffset) { builder.addOffset(1, deviceClockIDOffset, 0); }
  public static void addLocalClockID(FlatBufferBuilder builder, int localClockIDOffset) { builder.addOffset(2, localClockIDOffset, 0); }
  public static void addGeometries(FlatBufferBuilder builder, int geometriesOffset) { builder.addOffset(3, geometriesOffset, 0); }
  public static int createGeometriesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startGeometriesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addGeometryFilenames(FlatBufferBuilder builder, int geometryFilenamesOffset) { builder.addOffset(4, geometryFilenamesOffset, 0); }
  public static int createGeometryFilenamesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startGeometryFilenamesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addGeometryDir(FlatBufferBuilder builder, int geometryDirOffset) { builder.addOffset(5, geometryDirOffset, 0); }
  public static void addTrackerDeviceIDs(FlatBufferBuilder builder, int TrackerDeviceIDsOffset) { builder.addOffset(6, TrackerDeviceIDsOffset, 0); }
  public static int createTrackerDeviceIDsVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startTrackerDeviceIDsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addMarkerIDs(FlatBufferBuilder builder, int markerIDsOffset) { builder.addOffset(7, markerIDsOffset, 0); }
  public static int createMarkerIDsVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startMarkerIDsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addMarkerNames(FlatBufferBuilder builder, int markerNamesOffset) { builder.addOffset(8, markerNamesOffset, 0); }
  public static int createMarkerNamesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMarkerNamesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMDeviceSerialNumbers(FlatBufferBuilder builder, int mDeviceSerialNumbersOffset) { builder.addOffset(9, mDeviceSerialNumbersOffset, 0); }
  public static int createMDeviceSerialNumbersVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startMDeviceSerialNumbersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addMDeviceTypes(FlatBufferBuilder builder, int mDeviceTypesOffset) { builder.addOffset(10, mDeviceTypesOffset, 0); }
  public static int createMDeviceTypesVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startMDeviceTypesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endFusionTrackParameters(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

