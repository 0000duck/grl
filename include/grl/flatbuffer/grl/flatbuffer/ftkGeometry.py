# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers

class ftkGeometry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsftkGeometry(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ftkGeometry()
        x.Init(buf, n + offset)
        return x

    # ftkGeometry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ftkGeometry
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # ftkGeometry
    def GeometryID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ftkGeometry
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ftkGeometry
    def Positions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 24
            from .Vector3d import Vector3d
            obj = Vector3d()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ftkGeometry
    def PositionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ftkGeometryStart(builder): builder.StartObject(4)
def ftkGeometryAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def ftkGeometryAddGeometryID(builder, geometryID): builder.PrependUint32Slot(1, geometryID, 0)
def ftkGeometryAddVersion(builder, version): builder.PrependUint32Slot(2, version, 0)
def ftkGeometryAddPositions(builder, positions): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(positions), 0)
def ftkGeometryStartPositionsVector(builder, numElems): return builder.StartVector(24, numElems, 8)
def ftkGeometryEnd(builder): return builder.EndObject()
