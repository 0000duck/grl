// automatically generated by the FlatBuffers compiler, do not modify

package grl.flatbuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ftkMarker extends Table {
  public static ftkMarker getRootAsftkMarker(ByteBuffer _bb) { return getRootAsftkMarker(_bb, new ftkMarker()); }
  public static ftkMarker getRootAsftkMarker(ByteBuffer _bb, ftkMarker obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public ftkMarker __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long ID() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long geometryID() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long geometryPresenceMask(int j) { int o = __offset(10); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int geometryPresenceMaskLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer geometryPresenceMaskAsByteBuffer() { return __vector_as_bytebuffer(10, 4); }
  public ByteBuffer geometryPresenceMaskInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 4); }
  public Pose transform() { return transform(new Pose()); }
  public Pose transform(Pose obj) { int o = __offset(12); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startftkMarker(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addID(FlatBufferBuilder builder, long ID) { builder.addInt(1, (int)ID, (int)0L); }
  public static void addGeometryID(FlatBufferBuilder builder, long geometryID) { builder.addInt(2, (int)geometryID, (int)0L); }
  public static void addGeometryPresenceMask(FlatBufferBuilder builder, int geometryPresenceMaskOffset) { builder.addOffset(3, geometryPresenceMaskOffset, 0); }
  public static int createGeometryPresenceMaskVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startGeometryPresenceMaskVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTransform(FlatBufferBuilder builder, int transformOffset) { builder.addStruct(4, transformOffset, 0); }
  public static int endftkMarker(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

