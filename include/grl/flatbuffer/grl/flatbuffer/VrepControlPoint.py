# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers

class VrepControlPoint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsVrepControlPoint(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VrepControlPoint()
        x.Init(buf, n + offset)
        return x

    # VrepControlPoint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VrepControlPoint
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .Vector3d import Vector3d
            obj = Vector3d()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VrepControlPoint
    def Rotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .EulerXYZd import EulerXYZd
            obj = EulerXYZd()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VrepControlPoint
    def RelativeVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 1.0

    # VrepControlPoint
    def BezierPointCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # VrepControlPoint
    def InterpolationFactor1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.5

    # VrepControlPoint
    def InterpolationFactor2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.5

    # VrepControlPoint
    def VirtualDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VrepControlPoint
    def AuxiliaryFlags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # VrepControlPoint
    def AuxiliaryChannel1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VrepControlPoint
    def AuxiliaryChannel2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VrepControlPoint
    def AuxiliaryChannel3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VrepControlPoint
    def AuxiliaryChannel4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def VrepControlPointStart(builder): builder.StartObject(12)
def VrepControlPointAddPosition(builder, position): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def VrepControlPointAddRotation(builder, rotation): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rotation), 0)
def VrepControlPointAddRelativeVelocity(builder, relativeVelocity): builder.PrependFloat64Slot(2, relativeVelocity, 1.0)
def VrepControlPointAddBezierPointCount(builder, bezierPointCount): builder.PrependInt32Slot(3, bezierPointCount, 1)
def VrepControlPointAddInterpolationFactor1(builder, interpolationFactor1): builder.PrependFloat64Slot(4, interpolationFactor1, 0.5)
def VrepControlPointAddInterpolationFactor2(builder, interpolationFactor2): builder.PrependFloat64Slot(5, interpolationFactor2, 0.5)
def VrepControlPointAddVirtualDistance(builder, virtualDistance): builder.PrependFloat64Slot(6, virtualDistance, 0.0)
def VrepControlPointAddAuxiliaryFlags(builder, auxiliaryFlags): builder.PrependInt32Slot(7, auxiliaryFlags, 0)
def VrepControlPointAddAuxiliaryChannel1(builder, auxiliaryChannel1): builder.PrependFloat64Slot(8, auxiliaryChannel1, 0.0)
def VrepControlPointAddAuxiliaryChannel2(builder, auxiliaryChannel2): builder.PrependFloat64Slot(9, auxiliaryChannel2, 0.0)
def VrepControlPointAddAuxiliaryChannel3(builder, auxiliaryChannel3): builder.PrependFloat64Slot(10, auxiliaryChannel3, 0.0)
def VrepControlPointAddAuxiliaryChannel4(builder, auxiliaryChannel4): builder.PrependFloat64Slot(11, auxiliaryChannel4, 0.0)
def VrepControlPointEnd(builder): return builder.EndObject()
