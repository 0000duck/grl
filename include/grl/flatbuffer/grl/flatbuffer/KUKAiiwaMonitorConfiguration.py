# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers

class KUKAiiwaMonitorConfiguration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKUKAiiwaMonitorConfiguration(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KUKAiiwaMonitorConfiguration()
        x.Init(buf, n + offset)
        return x

    # KUKAiiwaMonitorConfiguration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KUKAiiwaMonitorConfiguration
    def HardwareVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # KUKAiiwaMonitorConfiguration
    def TorqueSensorLimits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KUKAiiwaMonitorConfiguration
    def TorqueSensorLimitsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KUKAiiwaMonitorConfiguration
    def TorqueSensorLimitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KUKAiiwaMonitorConfiguration
    def IsReadyToMove(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # KUKAiiwaMonitorConfiguration
    def IsMastered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

# /// set kuka tablet "processData" panel UI config strings
    # KUKAiiwaMonitorConfiguration
    def ProcessData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ProcessData import ProcessData
            obj = ProcessData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KUKAiiwaMonitorConfiguration
    def ProcessDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def KUKAiiwaMonitorConfigurationStart(builder): builder.StartObject(5)
def KUKAiiwaMonitorConfigurationAddHardwareVersion(builder, hardwareVersion): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(hardwareVersion), 0)
def KUKAiiwaMonitorConfigurationAddTorqueSensorLimits(builder, torqueSensorLimits): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(torqueSensorLimits), 0)
def KUKAiiwaMonitorConfigurationStartTorqueSensorLimitsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def KUKAiiwaMonitorConfigurationAddIsReadyToMove(builder, isReadyToMove): builder.PrependBoolSlot(2, isReadyToMove, 0)
def KUKAiiwaMonitorConfigurationAddIsMastered(builder, isMastered): builder.PrependBoolSlot(3, isMastered, 0)
def KUKAiiwaMonitorConfigurationAddProcessData(builder, processData): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(processData), 0)
def KUKAiiwaMonitorConfigurationStartProcessDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KUKAiiwaMonitorConfigurationEnd(builder): return builder.EndObject()
