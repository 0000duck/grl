# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers

class ftk3DFiducial(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsftk3DFiducial(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ftk3DFiducial()
        x.Init(buf, n + offset)
        return x

    # ftk3DFiducial
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ftk3DFiducial
    def MarkerID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ftk3DFiducial
    def LeftIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ftk3DFiducial
    def RightIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ftk3DFiducial
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .Vector3d import Vector3d
            obj = Vector3d()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ftk3DFiducial
    def EpipolarErrorPixels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ftk3DFiducial
    def TriangulationError(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ftk3DFiducial
    def Probability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def ftk3DFiducialStart(builder): builder.StartObject(7)
def ftk3DFiducialAddMarkerID(builder, markerID): builder.PrependUint32Slot(0, markerID, 0)
def ftk3DFiducialAddLeftIndex(builder, leftIndex): builder.PrependUint32Slot(1, leftIndex, 0)
def ftk3DFiducialAddRightIndex(builder, rightIndex): builder.PrependUint32Slot(2, rightIndex, 0)
def ftk3DFiducialAddPosition(builder, position): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def ftk3DFiducialAddEpipolarErrorPixels(builder, epipolarErrorPixels): builder.PrependFloat64Slot(4, epipolarErrorPixels, 0.0)
def ftk3DFiducialAddTriangulationError(builder, triangulationError): builder.PrependFloat64Slot(5, triangulationError, 0.0)
def ftk3DFiducialAddProbability(builder, probability): builder.PrependFloat64Slot(6, probability, 0.0)
def ftk3DFiducialEnd(builder): return builder.EndObject()
