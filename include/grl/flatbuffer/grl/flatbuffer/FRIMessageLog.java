// automatically generated by the FlatBuffers compiler, do not modify

package grl.flatbuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FRIMessageLog extends Table {
  public static FRIMessageLog getRootAsFRIMessageLog(ByteBuffer _bb) { return getRootAsFRIMessageLog(_bb, new FRIMessageLog()); }
  public static FRIMessageLog getRootAsFRIMessageLog(ByteBuffer _bb, FRIMessageLog obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public FRIMessageLog __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte sessionState() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte connectionQuality() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte controlMode() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public int messageIdentifier() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int sequenceCounter() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int reflectedSequenceCounter() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public double measuredJointPosition(int j) { int o = __offset(16); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int measuredJointPositionLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer measuredJointPositionAsByteBuffer() { return __vector_as_bytebuffer(16, 8); }
  public ByteBuffer measuredJointPositionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 8); }
  public double measuredTorque(int j) { int o = __offset(18); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int measuredTorqueLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer measuredTorqueAsByteBuffer() { return __vector_as_bytebuffer(18, 8); }
  public ByteBuffer measuredTorqueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 8); }
  public double commandedJointPosition(int j) { int o = __offset(20); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int commandedJointPositionLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer commandedJointPositionAsByteBuffer() { return __vector_as_bytebuffer(20, 8); }
  public ByteBuffer commandedJointPositionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 8); }
  public double commandedTorque(int j) { int o = __offset(22); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int commandedTorqueLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer commandedTorqueAsByteBuffer() { return __vector_as_bytebuffer(22, 8); }
  public ByteBuffer commandedTorqueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 8); }
  public double externalTorque(int j) { int o = __offset(24); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int externalTorqueLength() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer externalTorqueAsByteBuffer() { return __vector_as_bytebuffer(24, 8); }
  public ByteBuffer externalTorqueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 8); }
  public double jointStateInterpolated(int j) { int o = __offset(26); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int jointStateInterpolatedLength() { int o = __offset(26); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer jointStateInterpolatedAsByteBuffer() { return __vector_as_bytebuffer(26, 8); }
  public ByteBuffer jointStateInterpolatedInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 8); }
  public TimeEvent timeStamp() { return timeStamp(new TimeEvent()); }
  public TimeEvent timeStamp(TimeEvent obj) { int o = __offset(28); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createFRIMessageLog(FlatBufferBuilder builder,
      byte sessionState,
      byte connectionQuality,
      byte controlMode,
      int messageIdentifier,
      int sequenceCounter,
      int reflectedSequenceCounter,
      int measuredJointPositionOffset,
      int measuredTorqueOffset,
      int commandedJointPositionOffset,
      int commandedTorqueOffset,
      int externalTorqueOffset,
      int jointStateInterpolatedOffset,
      int timeStampOffset) {
    builder.startObject(13);
    FRIMessageLog.addTimeStamp(builder, timeStampOffset);
    FRIMessageLog.addJointStateInterpolated(builder, jointStateInterpolatedOffset);
    FRIMessageLog.addExternalTorque(builder, externalTorqueOffset);
    FRIMessageLog.addCommandedTorque(builder, commandedTorqueOffset);
    FRIMessageLog.addCommandedJointPosition(builder, commandedJointPositionOffset);
    FRIMessageLog.addMeasuredTorque(builder, measuredTorqueOffset);
    FRIMessageLog.addMeasuredJointPosition(builder, measuredJointPositionOffset);
    FRIMessageLog.addReflectedSequenceCounter(builder, reflectedSequenceCounter);
    FRIMessageLog.addSequenceCounter(builder, sequenceCounter);
    FRIMessageLog.addMessageIdentifier(builder, messageIdentifier);
    FRIMessageLog.addControlMode(builder, controlMode);
    FRIMessageLog.addConnectionQuality(builder, connectionQuality);
    FRIMessageLog.addSessionState(builder, sessionState);
    return FRIMessageLog.endFRIMessageLog(builder);
  }

  public static void startFRIMessageLog(FlatBufferBuilder builder) { builder.startObject(13); }
  public static void addSessionState(FlatBufferBuilder builder, byte sessionState) { builder.addByte(0, sessionState, 0); }
  public static void addConnectionQuality(FlatBufferBuilder builder, byte connectionQuality) { builder.addByte(1, connectionQuality, 0); }
  public static void addControlMode(FlatBufferBuilder builder, byte controlMode) { builder.addByte(2, controlMode, 0); }
  public static void addMessageIdentifier(FlatBufferBuilder builder, int messageIdentifier) { builder.addInt(3, messageIdentifier, 0); }
  public static void addSequenceCounter(FlatBufferBuilder builder, int sequenceCounter) { builder.addInt(4, sequenceCounter, 0); }
  public static void addReflectedSequenceCounter(FlatBufferBuilder builder, int reflectedSequenceCounter) { builder.addInt(5, reflectedSequenceCounter, 0); }
  public static void addMeasuredJointPosition(FlatBufferBuilder builder, int measuredJointPositionOffset) { builder.addOffset(6, measuredJointPositionOffset, 0); }
  public static int createMeasuredJointPositionVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startMeasuredJointPositionVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addMeasuredTorque(FlatBufferBuilder builder, int measuredTorqueOffset) { builder.addOffset(7, measuredTorqueOffset, 0); }
  public static int createMeasuredTorqueVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startMeasuredTorqueVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addCommandedJointPosition(FlatBufferBuilder builder, int commandedJointPositionOffset) { builder.addOffset(8, commandedJointPositionOffset, 0); }
  public static int createCommandedJointPositionVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startCommandedJointPositionVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addCommandedTorque(FlatBufferBuilder builder, int commandedTorqueOffset) { builder.addOffset(9, commandedTorqueOffset, 0); }
  public static int createCommandedTorqueVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startCommandedTorqueVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addExternalTorque(FlatBufferBuilder builder, int externalTorqueOffset) { builder.addOffset(10, externalTorqueOffset, 0); }
  public static int createExternalTorqueVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startExternalTorqueVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addJointStateInterpolated(FlatBufferBuilder builder, int jointStateInterpolatedOffset) { builder.addOffset(11, jointStateInterpolatedOffset, 0); }
  public static int createJointStateInterpolatedVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startJointStateInterpolatedVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addTimeStamp(FlatBufferBuilder builder, int timeStampOffset) { builder.addOffset(12, timeStampOffset, 0); }
  public static int endFRIMessageLog(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

