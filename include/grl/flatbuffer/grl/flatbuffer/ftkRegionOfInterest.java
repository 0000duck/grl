// automatically generated by the FlatBuffers compiler, do not modify

package grl.flatbuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ftkRegionOfInterest extends Table {
  public static ftkRegionOfInterest getRootAsftkRegionOfInterest(ByteBuffer _bb) { return getRootAsftkRegionOfInterest(_bb, new ftkRegionOfInterest()); }
  public static ftkRegionOfInterest getRootAsftkRegionOfInterest(ByteBuffer _bb, ftkRegionOfInterest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public ftkRegionOfInterest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double centerXPixels() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double centerYPixels() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public long RightEdge() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long BottomEdge() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long LeftEdge() { int o = __offset(12); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long TopEdge() { int o = __offset(14); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long pixelsCount() { int o = __offset(16); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public double probability() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createftkRegionOfInterest(FlatBufferBuilder builder,
      double centerXPixels,
      double centerYPixels,
      long RightEdge,
      long BottomEdge,
      long LeftEdge,
      long TopEdge,
      long pixelsCount,
      double probability) {
    builder.startObject(8);
    ftkRegionOfInterest.addProbability(builder, probability);
    ftkRegionOfInterest.addCenterYPixels(builder, centerYPixels);
    ftkRegionOfInterest.addCenterXPixels(builder, centerXPixels);
    ftkRegionOfInterest.addPixelsCount(builder, pixelsCount);
    ftkRegionOfInterest.addTopEdge(builder, TopEdge);
    ftkRegionOfInterest.addLeftEdge(builder, LeftEdge);
    ftkRegionOfInterest.addBottomEdge(builder, BottomEdge);
    ftkRegionOfInterest.addRightEdge(builder, RightEdge);
    return ftkRegionOfInterest.endftkRegionOfInterest(builder);
  }

  public static void startftkRegionOfInterest(FlatBufferBuilder builder) { builder.startObject(8); }
  public static void addCenterXPixels(FlatBufferBuilder builder, double centerXPixels) { builder.addDouble(0, centerXPixels, 0.0); }
  public static void addCenterYPixels(FlatBufferBuilder builder, double centerYPixels) { builder.addDouble(1, centerYPixels, 0.0); }
  public static void addRightEdge(FlatBufferBuilder builder, long RightEdge) { builder.addInt(2, (int)RightEdge, (int)0L); }
  public static void addBottomEdge(FlatBufferBuilder builder, long BottomEdge) { builder.addInt(3, (int)BottomEdge, (int)0L); }
  public static void addLeftEdge(FlatBufferBuilder builder, long LeftEdge) { builder.addInt(4, (int)LeftEdge, (int)0L); }
  public static void addTopEdge(FlatBufferBuilder builder, long TopEdge) { builder.addInt(5, (int)TopEdge, (int)0L); }
  public static void addPixelsCount(FlatBufferBuilder builder, long pixelsCount) { builder.addInt(6, (int)pixelsCount, (int)0L); }
  public static void addProbability(FlatBufferBuilder builder, double probability) { builder.addDouble(7, probability, 0.0); }
  public static int endftkRegionOfInterest(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

