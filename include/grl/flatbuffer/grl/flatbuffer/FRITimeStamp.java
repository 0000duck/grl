// automatically generated by the FlatBuffers compiler, do not modify

package grl.flatbuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FRITimeStamp extends Table {
  public static FRITimeStamp getRootAsFRITimeStamp(ByteBuffer _bb) { return getRootAsFRITimeStamp(_bb, new FRITimeStamp()); }
  public static FRITimeStamp getRootAsFRITimeStamp(ByteBuffer _bb, FRITimeStamp obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public FRITimeStamp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int sec() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int nanosec() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createFRITimeStamp(FlatBufferBuilder builder,
      int sec,
      int nanosec) {
    builder.startObject(2);
    FRITimeStamp.addNanosec(builder, nanosec);
    FRITimeStamp.addSec(builder, sec);
    return FRITimeStamp.endFRITimeStamp(builder);
  }

  public static void startFRITimeStamp(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addSec(FlatBufferBuilder builder, int sec) { builder.addInt(0, sec, 0); }
  public static void addNanosec(FlatBufferBuilder builder, int nanosec) { builder.addInt(1, nanosec, 0); }
  public static int endFRITimeStamp(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

