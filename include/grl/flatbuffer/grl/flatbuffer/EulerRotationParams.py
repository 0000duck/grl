# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers

class EulerRotationParams(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEulerRotationParams(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EulerRotationParams()
        x.Init(buf, n + offset)
        return x

    # EulerRotationParams
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EulerRotationParams
    def R1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # EulerRotationParams
    def R2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # EulerRotationParams
    def R3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # EulerRotationParams
    def EulerOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def EulerRotationParamsStart(builder): builder.StartObject(4)
def EulerRotationParamsAddR1(builder, r1): builder.PrependFloat64Slot(0, r1, 0.0)
def EulerRotationParamsAddR2(builder, r2): builder.PrependFloat64Slot(1, r2, 0.0)
def EulerRotationParamsAddR3(builder, r3): builder.PrependFloat64Slot(2, r3, 0.0)
def EulerRotationParamsAddEulerOrder(builder, eulerOrder): builder.PrependInt8Slot(3, eulerOrder, 0)
def EulerRotationParamsEnd(builder): return builder.EndObject()
