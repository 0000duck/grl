# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers

class SmartServo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSmartServo(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SmartServo()
        x.Init(buf, n + offset)
        return x

    # SmartServo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// normalized joint accelerations from 0 to 1 relative to system capabilities
    # SmartServo
    def JointAccelerationRel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SmartServo
    def JointAccelerationRelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # SmartServo
    def JointAccelerationRelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// normalized joint velocity from 0 to 1 relative to system capabilities
    # SmartServo
    def JointVelocityRel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SmartServo
    def JointVelocityRelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # SmartServo
    def JointVelocityRelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SmartServo
    def UpdateMinimumTrajectoryExecutionTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # SmartServo
    def MinimumTrajectoryExecutionTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def SmartServoStart(builder): builder.StartObject(4)
def SmartServoAddJointAccelerationRel(builder, jointAccelerationRel): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(jointAccelerationRel), 0)
def SmartServoStartJointAccelerationRelVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def SmartServoAddJointVelocityRel(builder, jointVelocityRel): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(jointVelocityRel), 0)
def SmartServoStartJointVelocityRelVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def SmartServoAddUpdateMinimumTrajectoryExecutionTime(builder, updateMinimumTrajectoryExecutionTime): builder.PrependBoolSlot(2, updateMinimumTrajectoryExecutionTime, 0)
def SmartServoAddMinimumTrajectoryExecutionTime(builder, minimumTrajectoryExecutionTime): builder.PrependFloat64Slot(3, minimumTrajectoryExecutionTime, 0.0)
def SmartServoEnd(builder): return builder.EndObject()
