# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers

class KUKAiiwaArmConfiguration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKUKAiiwaArmConfiguration(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KUKAiiwaArmConfiguration()
        x.Init(buf, n + offset)
        return x

    # KUKAiiwaArmConfiguration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KUKAiiwaArmConfiguration
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

# /// how commands will be sent to robot
    # KUKAiiwaArmConfiguration
    def CommandInterface(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

# /// how robot state will be sent to driver
    # KUKAiiwaArmConfiguration
    def MonitorInterface(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

# /// motion command mode: cartesian, wrench, torque commands
    # KUKAiiwaArmConfiguration
    def ClientCommandMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

# /// The type of commands FRI will use: cartesian, joint
    # KUKAiiwaArmConfiguration
    def OverlayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

# /// position, cartesian impedence, or joint impedence low level controller adjustments
    # KUKAiiwaArmConfiguration
    def ControlMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # KUKAiiwaArmConfiguration
    def SetCartImpedance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .CartesianImpedenceControlMode import CartesianImpedenceControlMode
            obj = CartesianImpedenceControlMode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KUKAiiwaArmConfiguration
    def SetJointImpedance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .JointImpedenceControlMode import JointImpedenceControlMode
            obj = JointImpedenceControlMode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KUKAiiwaArmConfiguration
    def SmartServoConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .SmartServo import SmartServo
            obj = SmartServo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KUKAiiwaArmConfiguration
    def FRIConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .FRI import FRI
            obj = FRI()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KUKAiiwaArmConfiguration
    def Tools(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LinkObject import LinkObject
            obj = LinkObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KUKAiiwaArmConfiguration
    def ToolsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// set kuka tablet "processData" panel UI config strings
    # KUKAiiwaArmConfiguration
    def ProcessData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ProcessData import ProcessData
            obj = ProcessData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KUKAiiwaArmConfiguration
    def ProcessDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KUKAiiwaArmConfiguration
    def CurrentMotionCenter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # KUKAiiwaArmConfiguration
    def RequestMonitorProcessData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

def KUKAiiwaArmConfigurationStart(builder): builder.StartObject(14)
def KUKAiiwaArmConfigurationAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def KUKAiiwaArmConfigurationAddCommandInterface(builder, commandInterface): builder.PrependInt8Slot(1, commandInterface, 0)
def KUKAiiwaArmConfigurationAddMonitorInterface(builder, monitorInterface): builder.PrependInt8Slot(2, monitorInterface, 0)
def KUKAiiwaArmConfigurationAddClientCommandMode(builder, clientCommandMode): builder.PrependInt8Slot(3, clientCommandMode, 0)
def KUKAiiwaArmConfigurationAddOverlayType(builder, overlayType): builder.PrependInt8Slot(4, overlayType, 0)
def KUKAiiwaArmConfigurationAddControlMode(builder, controlMode): builder.PrependInt8Slot(5, controlMode, 0)
def KUKAiiwaArmConfigurationAddSetCartImpedance(builder, setCartImpedance): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(setCartImpedance), 0)
def KUKAiiwaArmConfigurationAddSetJointImpedance(builder, setJointImpedance): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(setJointImpedance), 0)
def KUKAiiwaArmConfigurationAddSmartServoConfig(builder, smartServoConfig): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(smartServoConfig), 0)
def KUKAiiwaArmConfigurationAddFRIConfig(builder, FRIConfig): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(FRIConfig), 0)
def KUKAiiwaArmConfigurationAddTools(builder, tools): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(tools), 0)
def KUKAiiwaArmConfigurationStartToolsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KUKAiiwaArmConfigurationAddProcessData(builder, processData): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(processData), 0)
def KUKAiiwaArmConfigurationStartProcessDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KUKAiiwaArmConfigurationAddCurrentMotionCenter(builder, currentMotionCenter): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(currentMotionCenter), 0)
def KUKAiiwaArmConfigurationAddRequestMonitorProcessData(builder, requestMonitorProcessData): builder.PrependBoolSlot(13, requestMonitorProcessData, 0)
def KUKAiiwaArmConfigurationEnd(builder): return builder.EndObject()
