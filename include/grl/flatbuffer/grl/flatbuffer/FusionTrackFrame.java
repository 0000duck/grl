// automatically generated by the FlatBuffers compiler, do not modify

package grl.flatbuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Data for one frame capture
 * On the Atracsys FusionTrack optical tracker
 * look at ftkInterface.h for details
 * Frame class is defined in FusionTrack.hpp
 */
public final class FusionTrackFrame extends Table {
  public static FusionTrackFrame getRootAsFusionTrackFrame(ByteBuffer _bb) { return getRootAsFusionTrackFrame(_bb, new FusionTrackFrame()); }
  public static FusionTrackFrame getRootAsFusionTrackFrame(ByteBuffer _bb, FusionTrackFrame obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public FusionTrackFrame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double timestamp() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public long serialNumber() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long hardwareTimestampUS() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long desynchroUS() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long counter() { int o = __offset(12); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long format() { int o = __offset(14); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long width() { int o = __offset(16); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long height() { int o = __offset(18); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int imageStrideInBytes() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long imageHeaderVersion() { int o = __offset(22); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int imageHeaderStatus() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String imageLeftPixels() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer imageLeftPixelsAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer imageLeftPixelsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  public long imageLeftPixelsVersion() { int o = __offset(28); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int imageLeftStatus() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String imageRightPixels() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer imageRightPixelsAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer imageRightPixelsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  public long imageRightPixelsVersion() { int o = __offset(34); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int imageRightStatus() { int o = __offset(36); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public ftkRegionOfInterest regionsOfInterestLeft(int j) { return regionsOfInterestLeft(new ftkRegionOfInterest(), j); }
  public ftkRegionOfInterest regionsOfInterestLeft(ftkRegionOfInterest obj, int j) { int o = __offset(38); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int regionsOfInterestLeftLength() { int o = __offset(38); return o != 0 ? __vector_len(o) : 0; }
  public long regionsOfInterestLeftVersion() { int o = __offset(40); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int regionsOfInterestLeftStatus() { int o = __offset(42); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public ftkRegionOfInterest regionsOfInterestRight(int j) { return regionsOfInterestRight(new ftkRegionOfInterest(), j); }
  public ftkRegionOfInterest regionsOfInterestRight(ftkRegionOfInterest obj, int j) { int o = __offset(44); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int regionsOfInterestRightLength() { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; }
  public long regionsOfInterestRightVersion() { int o = __offset(46); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int regionsOfInterestRightStatus() { int o = __offset(48); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public ftk3DFiducial threeDFiducials(int j) { return threeDFiducials(new ftk3DFiducial(), j); }
  public ftk3DFiducial threeDFiducials(ftk3DFiducial obj, int j) { int o = __offset(50); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int threeDFiducialsLength() { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; }
  public long threeDFiducialsVersion() { int o = __offset(52); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int threeDFiducialsStatus() { int o = __offset(54); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public ftkMarker markers(int j) { return markers(new ftkMarker(), j); }
  public ftkMarker markers(ftkMarker obj, int j) { int o = __offset(56); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int markersLength() { int o = __offset(56); return o != 0 ? __vector_len(o) : 0; }
  public long markersVersion() { int o = __offset(58); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int markersStatus() { int o = __offset(60); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int deviceType() { int o = __offset(62); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long ftkError() { int o = __offset(64); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createFusionTrackFrame(FlatBufferBuilder builder,
      double timestamp,
      long serialNumber,
      long hardwareTimestampUS,
      long desynchroUS,
      long counter,
      long format,
      long width,
      long height,
      int imageStrideInBytes,
      long imageHeaderVersion,
      int imageHeaderStatus,
      int imageLeftPixelsOffset,
      long imageLeftPixelsVersion,
      int imageLeftStatus,
      int imageRightPixelsOffset,
      long imageRightPixelsVersion,
      int imageRightStatus,
      int regionsOfInterestLeftOffset,
      long regionsOfInterestLeftVersion,
      int regionsOfInterestLeftStatus,
      int regionsOfInterestRightOffset,
      long regionsOfInterestRightVersion,
      int regionsOfInterestRightStatus,
      int threeDFiducialsOffset,
      long threeDFiducialsVersion,
      int threeDFiducialsStatus,
      int markersOffset,
      long markersVersion,
      int markersStatus,
      int deviceType,
      long ftkError) {
    builder.startObject(31);
    FusionTrackFrame.addFtkError(builder, ftkError);
    FusionTrackFrame.addDesynchroUS(builder, desynchroUS);
    FusionTrackFrame.addHardwareTimestampUS(builder, hardwareTimestampUS);
    FusionTrackFrame.addSerialNumber(builder, serialNumber);
    FusionTrackFrame.addTimestamp(builder, timestamp);
    FusionTrackFrame.addDeviceType(builder, deviceType);
    FusionTrackFrame.addMarkersStatus(builder, markersStatus);
    FusionTrackFrame.addMarkersVersion(builder, markersVersion);
    FusionTrackFrame.addMarkers(builder, markersOffset);
    FusionTrackFrame.addThreeDFiducialsStatus(builder, threeDFiducialsStatus);
    FusionTrackFrame.addThreeDFiducialsVersion(builder, threeDFiducialsVersion);
    FusionTrackFrame.addThreeDFiducials(builder, threeDFiducialsOffset);
    FusionTrackFrame.addRegionsOfInterestRightStatus(builder, regionsOfInterestRightStatus);
    FusionTrackFrame.addRegionsOfInterestRightVersion(builder, regionsOfInterestRightVersion);
    FusionTrackFrame.addRegionsOfInterestRight(builder, regionsOfInterestRightOffset);
    FusionTrackFrame.addRegionsOfInterestLeftStatus(builder, regionsOfInterestLeftStatus);
    FusionTrackFrame.addRegionsOfInterestLeftVersion(builder, regionsOfInterestLeftVersion);
    FusionTrackFrame.addRegionsOfInterestLeft(builder, regionsOfInterestLeftOffset);
    FusionTrackFrame.addImageRightStatus(builder, imageRightStatus);
    FusionTrackFrame.addImageRightPixelsVersion(builder, imageRightPixelsVersion);
    FusionTrackFrame.addImageRightPixels(builder, imageRightPixelsOffset);
    FusionTrackFrame.addImageLeftStatus(builder, imageLeftStatus);
    FusionTrackFrame.addImageLeftPixelsVersion(builder, imageLeftPixelsVersion);
    FusionTrackFrame.addImageLeftPixels(builder, imageLeftPixelsOffset);
    FusionTrackFrame.addImageHeaderStatus(builder, imageHeaderStatus);
    FusionTrackFrame.addImageHeaderVersion(builder, imageHeaderVersion);
    FusionTrackFrame.addImageStrideInBytes(builder, imageStrideInBytes);
    FusionTrackFrame.addHeight(builder, height);
    FusionTrackFrame.addWidth(builder, width);
    FusionTrackFrame.addFormat(builder, format);
    FusionTrackFrame.addCounter(builder, counter);
    return FusionTrackFrame.endFusionTrackFrame(builder);
  }

  public static void startFusionTrackFrame(FlatBufferBuilder builder) { builder.startObject(31); }
  public static void addTimestamp(FlatBufferBuilder builder, double timestamp) { builder.addDouble(0, timestamp, 0.0); }
  public static void addSerialNumber(FlatBufferBuilder builder, long serialNumber) { builder.addLong(1, serialNumber, 0L); }
  public static void addHardwareTimestampUS(FlatBufferBuilder builder, long hardwareTimestampUS) { builder.addLong(2, hardwareTimestampUS, 0L); }
  public static void addDesynchroUS(FlatBufferBuilder builder, long desynchroUS) { builder.addLong(3, desynchroUS, 0L); }
  public static void addCounter(FlatBufferBuilder builder, long counter) { builder.addInt(4, (int)counter, (int)0L); }
  public static void addFormat(FlatBufferBuilder builder, long format) { builder.addInt(5, (int)format, (int)0L); }
  public static void addWidth(FlatBufferBuilder builder, long width) { builder.addInt(6, (int)width, (int)0L); }
  public static void addHeight(FlatBufferBuilder builder, long height) { builder.addInt(7, (int)height, (int)0L); }
  public static void addImageStrideInBytes(FlatBufferBuilder builder, int imageStrideInBytes) { builder.addInt(8, imageStrideInBytes, 0); }
  public static void addImageHeaderVersion(FlatBufferBuilder builder, long imageHeaderVersion) { builder.addInt(9, (int)imageHeaderVersion, (int)0L); }
  public static void addImageHeaderStatus(FlatBufferBuilder builder, int imageHeaderStatus) { builder.addInt(10, imageHeaderStatus, 0); }
  public static void addImageLeftPixels(FlatBufferBuilder builder, int imageLeftPixelsOffset) { builder.addOffset(11, imageLeftPixelsOffset, 0); }
  public static void addImageLeftPixelsVersion(FlatBufferBuilder builder, long imageLeftPixelsVersion) { builder.addInt(12, (int)imageLeftPixelsVersion, (int)0L); }
  public static void addImageLeftStatus(FlatBufferBuilder builder, int imageLeftStatus) { builder.addInt(13, imageLeftStatus, 0); }
  public static void addImageRightPixels(FlatBufferBuilder builder, int imageRightPixelsOffset) { builder.addOffset(14, imageRightPixelsOffset, 0); }
  public static void addImageRightPixelsVersion(FlatBufferBuilder builder, long imageRightPixelsVersion) { builder.addInt(15, (int)imageRightPixelsVersion, (int)0L); }
  public static void addImageRightStatus(FlatBufferBuilder builder, int imageRightStatus) { builder.addInt(16, imageRightStatus, 0); }
  public static void addRegionsOfInterestLeft(FlatBufferBuilder builder, int regionsOfInterestLeftOffset) { builder.addOffset(17, regionsOfInterestLeftOffset, 0); }
  public static int createRegionsOfInterestLeftVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRegionsOfInterestLeftVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRegionsOfInterestLeftVersion(FlatBufferBuilder builder, long regionsOfInterestLeftVersion) { builder.addInt(18, (int)regionsOfInterestLeftVersion, (int)0L); }
  public static void addRegionsOfInterestLeftStatus(FlatBufferBuilder builder, int regionsOfInterestLeftStatus) { builder.addInt(19, regionsOfInterestLeftStatus, 0); }
  public static void addRegionsOfInterestRight(FlatBufferBuilder builder, int regionsOfInterestRightOffset) { builder.addOffset(20, regionsOfInterestRightOffset, 0); }
  public static int createRegionsOfInterestRightVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRegionsOfInterestRightVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRegionsOfInterestRightVersion(FlatBufferBuilder builder, long regionsOfInterestRightVersion) { builder.addInt(21, (int)regionsOfInterestRightVersion, (int)0L); }
  public static void addRegionsOfInterestRightStatus(FlatBufferBuilder builder, int regionsOfInterestRightStatus) { builder.addInt(22, regionsOfInterestRightStatus, 0); }
  public static void addThreeDFiducials(FlatBufferBuilder builder, int threeDFiducialsOffset) { builder.addOffset(23, threeDFiducialsOffset, 0); }
  public static int createThreeDFiducialsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startThreeDFiducialsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addThreeDFiducialsVersion(FlatBufferBuilder builder, long threeDFiducialsVersion) { builder.addInt(24, (int)threeDFiducialsVersion, (int)0L); }
  public static void addThreeDFiducialsStatus(FlatBufferBuilder builder, int threeDFiducialsStatus) { builder.addInt(25, threeDFiducialsStatus, 0); }
  public static void addMarkers(FlatBufferBuilder builder, int markersOffset) { builder.addOffset(26, markersOffset, 0); }
  public static int createMarkersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMarkersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMarkersVersion(FlatBufferBuilder builder, long markersVersion) { builder.addInt(27, (int)markersVersion, (int)0L); }
  public static void addMarkersStatus(FlatBufferBuilder builder, int markersStatus) { builder.addInt(28, markersStatus, 0); }
  public static void addDeviceType(FlatBufferBuilder builder, int deviceType) { builder.addInt(29, deviceType, 0); }
  public static void addFtkError(FlatBufferBuilder builder, long ftkError) { builder.addLong(30, ftkError, 0L); }
  public static int endFusionTrackFrame(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

