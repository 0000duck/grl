# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers

class FRIMessageLog(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFRIMessageLog(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FRIMessageLog()
        x.Init(buf, n + offset)
        return x

    # FRIMessageLog
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FRIMessageLog
    def SessionState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FRIMessageLog
    def ConnectionQuality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FRIMessageLog
    def ControlMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FRIMessageLog
    def MessageIdentifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FRIMessageLog
    def SequenceCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FRIMessageLog
    def ReflectedSequenceCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FRIMessageLog
    def MeasuredJointPosition(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FRIMessageLog
    def MeasuredJointPositionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # FRIMessageLog
    def MeasuredJointPositionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FRIMessageLog
    def MeasuredTorque(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FRIMessageLog
    def MeasuredTorqueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # FRIMessageLog
    def MeasuredTorqueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FRIMessageLog
    def CommandedJointPosition(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FRIMessageLog
    def CommandedJointPositionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # FRIMessageLog
    def CommandedJointPositionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FRIMessageLog
    def CommandedTorque(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FRIMessageLog
    def CommandedTorqueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # FRIMessageLog
    def CommandedTorqueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FRIMessageLog
    def ExternalTorque(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FRIMessageLog
    def ExternalTorqueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # FRIMessageLog
    def ExternalTorqueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FRIMessageLog
    def JointStateInterpolated(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FRIMessageLog
    def JointStateInterpolatedAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # FRIMessageLog
    def JointStateInterpolatedLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FRIMessageLog
    def TimeStamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .TimeEvent import TimeEvent
            obj = TimeEvent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FRIMessageLogStart(builder): builder.StartObject(13)
def FRIMessageLogAddSessionState(builder, sessionState): builder.PrependInt8Slot(0, sessionState, 0)
def FRIMessageLogAddConnectionQuality(builder, connectionQuality): builder.PrependInt8Slot(1, connectionQuality, 0)
def FRIMessageLogAddControlMode(builder, controlMode): builder.PrependInt8Slot(2, controlMode, 0)
def FRIMessageLogAddMessageIdentifier(builder, messageIdentifier): builder.PrependInt32Slot(3, messageIdentifier, 0)
def FRIMessageLogAddSequenceCounter(builder, sequenceCounter): builder.PrependInt32Slot(4, sequenceCounter, 0)
def FRIMessageLogAddReflectedSequenceCounter(builder, reflectedSequenceCounter): builder.PrependInt32Slot(5, reflectedSequenceCounter, 0)
def FRIMessageLogAddMeasuredJointPosition(builder, measuredJointPosition): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(measuredJointPosition), 0)
def FRIMessageLogStartMeasuredJointPositionVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FRIMessageLogAddMeasuredTorque(builder, measuredTorque): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(measuredTorque), 0)
def FRIMessageLogStartMeasuredTorqueVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FRIMessageLogAddCommandedJointPosition(builder, commandedJointPosition): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(commandedJointPosition), 0)
def FRIMessageLogStartCommandedJointPositionVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FRIMessageLogAddCommandedTorque(builder, commandedTorque): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(commandedTorque), 0)
def FRIMessageLogStartCommandedTorqueVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FRIMessageLogAddExternalTorque(builder, externalTorque): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(externalTorque), 0)
def FRIMessageLogStartExternalTorqueVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FRIMessageLogAddJointStateInterpolated(builder, jointStateInterpolated): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(jointStateInterpolated), 0)
def FRIMessageLogStartJointStateInterpolatedVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FRIMessageLogAddTimeStamp(builder, timeStamp): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(timeStamp), 0)
def FRIMessageLogEnd(builder): return builder.EndObject()
