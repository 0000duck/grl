# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers

class FRI(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFRI(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FRI()
        x.Init(buf, n + offset)
        return x

    # FRI
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FRI
    def OverlayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

# /// Set the value for the send period of the connection from the KUKA controller to the remote side in [ms].
# /// This means, the KUKA controller will send cyclic FRI messages every sendPeriod milliseconds to the remote side.
# ///
# ///
# /// Parameters:
# /// sendPeriod - the send period in milliseconds, 1 <= sendPeriod <= 100.
# /// Note: The recommended value for good performance should be between 1-5 milliseconds.
    # FRI
    def SendPeriodMillisec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 4

# /// Set the receive multiplier of the cycle time from the remote side to the KUKA controller.
# /// This multiplier defines the value of the receivePeriod which is calculated:
# /// receivePeriod = receiveMultiplier * sendPeriod
# ///
# /// The KUKA controller will expect a FRI response message every receivePeriod milliseconds from the remote side.
# ///
# /// The receivePeriod has to be within the range of:
# /// 1 <= receivePeriod <= 100.
    # FRI
    def SetReceiveMultiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 5

    # FRI
    def UpdatePortOnRemote(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

# /// Set the port ID of the socket at the controller side.
# /// Note: Do not change this port ID, unless your application requires different port IDs on both ends of the FRI channel.
# /// For changing the FRI port ID on both sides, it is sufficient to call setPortOnRemote(int).
# /// Values of controllerPortID:
# /// "-1" - The configuration of setPortOnRemote(int) is used. This is the default.
# /// recommended range of port IDs: 30200 <= controllerPortID < 30210
    # FRI
    def PortOnRemote(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # FRI
    def UpdatePortOnController(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

# ///  Set the port ID of the FRI channel at the remote side.
# ///  By default, this port ID is used on both sides of the FRI channel, unless specified otherwise by setPortOnController(int).
# ///
# ///  Values of portID:
# ///
# ///  default port ID: 30200
# ///  recommended range of port IDs: 30200 <= portID < 30210
# ///  Since the FRI channel utilizes UDP as connection layer, make sure, that your network topology (firewall, network services) are chosen accordingly.
# ///
# ///  Parameters:
# ///  portID - the port ID > 0 (also known as UDP port number)
    # FRI
    def PortOnController(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def FRIStart(builder): builder.StartObject(7)
def FRIAddOverlayType(builder, overlayType): builder.PrependInt8Slot(0, overlayType, 1)
def FRIAddSendPeriodMillisec(builder, sendPeriodMillisec): builder.PrependInt32Slot(1, sendPeriodMillisec, 4)
def FRIAddSetReceiveMultiplier(builder, setReceiveMultiplier): builder.PrependInt32Slot(2, setReceiveMultiplier, 5)
def FRIAddUpdatePortOnRemote(builder, updatePortOnRemote): builder.PrependBoolSlot(3, updatePortOnRemote, 0)
def FRIAddPortOnRemote(builder, portOnRemote): builder.PrependInt16Slot(4, portOnRemote, 0)
def FRIAddUpdatePortOnController(builder, updatePortOnController): builder.PrependBoolSlot(5, updatePortOnController, 0)
def FRIAddPortOnController(builder, portOnController): builder.PrependInt16Slot(6, portOnController, 0)
def FRIEnd(builder): return builder.EndObject()
