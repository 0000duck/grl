# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers

class JointImpedenceControlMode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsJointImpedenceControlMode(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = JointImpedenceControlMode()
        x.Init(buf, n + offset)
        return x

    # JointImpedenceControlMode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # JointImpedenceControlMode
    def Stiffness(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # JointImpedenceControlMode
    def StiffnessAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # JointImpedenceControlMode
    def StiffnessLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # JointImpedenceControlMode
    def Damping(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # JointImpedenceControlMode
    def DampingAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # JointImpedenceControlMode
    def DampingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def JointImpedenceControlModeStart(builder): builder.StartObject(2)
def JointImpedenceControlModeAddStiffness(builder, stiffness): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stiffness), 0)
def JointImpedenceControlModeStartStiffnessVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def JointImpedenceControlModeAddDamping(builder, damping): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(damping), 0)
def JointImpedenceControlModeStartDampingVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def JointImpedenceControlModeEnd(builder): return builder.EndObject()
