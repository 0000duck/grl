# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffer

import flatbuffers

class ftkRegionOfInterest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsftkRegionOfInterest(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ftkRegionOfInterest()
        x.Init(buf, n + offset)
        return x

    # ftkRegionOfInterest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ftkRegionOfInterest
    def CenterXPixels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ftkRegionOfInterest
    def CenterYPixels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ftkRegionOfInterest
    def RightEdge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ftkRegionOfInterest
    def BottomEdge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ftkRegionOfInterest
    def LeftEdge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ftkRegionOfInterest
    def TopEdge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ftkRegionOfInterest
    def PixelsCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ftkRegionOfInterest
    def Probability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def ftkRegionOfInterestStart(builder): builder.StartObject(8)
def ftkRegionOfInterestAddCenterXPixels(builder, centerXPixels): builder.PrependFloat64Slot(0, centerXPixels, 0.0)
def ftkRegionOfInterestAddCenterYPixels(builder, centerYPixels): builder.PrependFloat64Slot(1, centerYPixels, 0.0)
def ftkRegionOfInterestAddRightEdge(builder, RightEdge): builder.PrependUint32Slot(2, RightEdge, 0)
def ftkRegionOfInterestAddBottomEdge(builder, BottomEdge): builder.PrependUint32Slot(3, BottomEdge, 0)
def ftkRegionOfInterestAddLeftEdge(builder, LeftEdge): builder.PrependUint32Slot(4, LeftEdge, 0)
def ftkRegionOfInterestAddTopEdge(builder, TopEdge): builder.PrependUint32Slot(5, TopEdge, 0)
def ftkRegionOfInterestAddPixelsCount(builder, pixelsCount): builder.PrependUint32Slot(6, pixelsCount, 0)
def ftkRegionOfInterestAddProbability(builder, probability): builder.PrependFloat64Slot(7, probability, 0.0)
def ftkRegionOfInterestEnd(builder): return builder.EndObject()
