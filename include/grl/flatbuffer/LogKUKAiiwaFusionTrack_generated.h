// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGKUKAIIWAFUSIONTRACK_GRL_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_LOGKUKAIIWAFUSIONTRACK_GRL_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"

#include "ArmControlState_generated.h"
#include "Euler_generated.h"
#include "FusionTrack_generated.h"
#include "Geometry_generated.h"
#include "JointState_generated.h"
#include "KUKAiiwa_generated.h"
#include "LinkObject_generated.h"
#include "Time_generated.h"

namespace grl {
namespace flatbuffer {

struct KUKAiiwaFusionTrackMessage;
struct KUKAiiwaFusionTrackMessageT;

struct LogKUKAiiwaFusionTrack;
struct LogKUKAiiwaFusionTrackT;

enum class DeviceState : uint8_t {
  NONE = 0,
  KUKAiiwaState = 1,
  FusionTrackMessage = 2,
  MIN = NONE,
  MAX = FusionTrackMessage
};

inline const DeviceState (&EnumValuesDeviceState())[3] {
  static const DeviceState values[] = {
    DeviceState::NONE,
    DeviceState::KUKAiiwaState,
    DeviceState::FusionTrackMessage
  };
  return values;
}

inline const char * const *EnumNamesDeviceState() {
  static const char * const names[] = {
    "NONE",
    "KUKAiiwaState",
    "FusionTrackMessage",
    nullptr
  };
  return names;
}

inline const char *EnumNameDeviceState(DeviceState e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesDeviceState()[index];
}

template<typename T> struct DeviceStateTraits {
  static const DeviceState enum_value = DeviceState::NONE;
};

template<> struct DeviceStateTraits<KUKAiiwaState> {
  static const DeviceState enum_value = DeviceState::KUKAiiwaState;
};

template<> struct DeviceStateTraits<FusionTrackMessage> {
  static const DeviceState enum_value = DeviceState::FusionTrackMessage;
};

struct DeviceStateUnion {
  DeviceState type;
  void *value;

  DeviceStateUnion() : type(DeviceState::NONE), value(nullptr) {}
  DeviceStateUnion(DeviceStateUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(DeviceState::NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  DeviceStateUnion(const DeviceStateUnion &) FLATBUFFERS_NOEXCEPT;
  DeviceStateUnion &operator=(const DeviceStateUnion &u) FLATBUFFERS_NOEXCEPT
    { DeviceStateUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  DeviceStateUnion &operator=(DeviceStateUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~DeviceStateUnion() { Reset(); }

  void Reset();

#ifndef FLATBUFFERS_CPP98_STL
  template <typename T>
  void Set(T&& val) {
    Reset();
    type = DeviceStateTraits<typename T::TableType>::enum_value;
    if (type != DeviceState::NONE) {
      value = new T(std::forward<T>(val));
    }
  }
#endif  // FLATBUFFERS_CPP98_STL

  static void *UnPack(const void *obj, DeviceState type, const flatbuffers::resolver_function_t *resolver);
  flatbuffers::Offset<void> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  KUKAiiwaStateT *AsKUKAiiwaState() {
    return type == DeviceState::KUKAiiwaState ?
      reinterpret_cast<KUKAiiwaStateT *>(value) : nullptr;
  }
  const KUKAiiwaStateT *AsKUKAiiwaState() const {
    return type == DeviceState::KUKAiiwaState ?
      reinterpret_cast<const KUKAiiwaStateT *>(value) : nullptr;
  }
  FusionTrackMessageT *AsFusionTrackMessage() {
    return type == DeviceState::FusionTrackMessage ?
      reinterpret_cast<FusionTrackMessageT *>(value) : nullptr;
  }
  const FusionTrackMessageT *AsFusionTrackMessage() const {
    return type == DeviceState::FusionTrackMessage ?
      reinterpret_cast<const FusionTrackMessageT *>(value) : nullptr;
  }
};

bool VerifyDeviceState(flatbuffers::Verifier &verifier, const void *obj, DeviceState type);
bool VerifyDeviceStateVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct KUKAiiwaFusionTrackMessageT : public flatbuffers::NativeTable {
  typedef KUKAiiwaFusionTrackMessage TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.KUKAiiwaFusionTrackMessageT";
  }
  double timestamp;
  std::unique_ptr<TimeEventT> timeEvent;
  DeviceStateUnion deviceState;
  KUKAiiwaFusionTrackMessageT()
      : timestamp(0.0) {
  }
};

struct KUKAiiwaFusionTrackMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef KUKAiiwaFusionTrackMessageT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.KUKAiiwaFusionTrackMessage";
  }
  enum {
    VT_TIMESTAMP = 4,
    VT_TIMEEVENT = 6,
    VT_DEVICESTATE_TYPE = 8,
    VT_DEVICESTATE = 10
  };
  double timestamp() const {
    return GetField<double>(VT_TIMESTAMP, 0.0);
  }
  const TimeEvent *timeEvent() const {
    return GetPointer<const TimeEvent *>(VT_TIMEEVENT);
  }
  DeviceState deviceState_type() const {
    return static_cast<DeviceState>(GetField<uint8_t>(VT_DEVICESTATE_TYPE, 0));
  }
  const void *deviceState() const {
    return GetPointer<const void *>(VT_DEVICESTATE);
  }
  template<typename T> const T *deviceState_as() const;
  const KUKAiiwaState *deviceState_as_KUKAiiwaState() const {
    return deviceState_type() == DeviceState::KUKAiiwaState ? static_cast<const KUKAiiwaState *>(deviceState()) : nullptr;
  }
  const FusionTrackMessage *deviceState_as_FusionTrackMessage() const {
    return deviceState_type() == DeviceState::FusionTrackMessage ? static_cast<const FusionTrackMessage *>(deviceState()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_TIMESTAMP) &&
           VerifyOffset(verifier, VT_TIMEEVENT) &&
           verifier.VerifyTable(timeEvent()) &&
           VerifyField<uint8_t>(verifier, VT_DEVICESTATE_TYPE) &&
           VerifyOffset(verifier, VT_DEVICESTATE) &&
           VerifyDeviceState(verifier, deviceState(), deviceState_type()) &&
           verifier.EndTable();
  }
  KUKAiiwaFusionTrackMessageT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(KUKAiiwaFusionTrackMessageT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<KUKAiiwaFusionTrackMessage> Pack(flatbuffers::FlatBufferBuilder &_fbb, const KUKAiiwaFusionTrackMessageT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const KUKAiiwaState *KUKAiiwaFusionTrackMessage::deviceState_as<KUKAiiwaState>() const {
  return deviceState_as_KUKAiiwaState();
}

template<> inline const FusionTrackMessage *KUKAiiwaFusionTrackMessage::deviceState_as<FusionTrackMessage>() const {
  return deviceState_as_FusionTrackMessage();
}

struct KUKAiiwaFusionTrackMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_timestamp(double timestamp) {
    fbb_.AddElement<double>(KUKAiiwaFusionTrackMessage::VT_TIMESTAMP, timestamp, 0.0);
  }
  void add_timeEvent(flatbuffers::Offset<TimeEvent> timeEvent) {
    fbb_.AddOffset(KUKAiiwaFusionTrackMessage::VT_TIMEEVENT, timeEvent);
  }
  void add_deviceState_type(DeviceState deviceState_type) {
    fbb_.AddElement<uint8_t>(KUKAiiwaFusionTrackMessage::VT_DEVICESTATE_TYPE, static_cast<uint8_t>(deviceState_type), 0);
  }
  void add_deviceState(flatbuffers::Offset<void> deviceState) {
    fbb_.AddOffset(KUKAiiwaFusionTrackMessage::VT_DEVICESTATE, deviceState);
  }
  explicit KUKAiiwaFusionTrackMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  KUKAiiwaFusionTrackMessageBuilder &operator=(const KUKAiiwaFusionTrackMessageBuilder &);
  flatbuffers::Offset<KUKAiiwaFusionTrackMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<KUKAiiwaFusionTrackMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<KUKAiiwaFusionTrackMessage> CreateKUKAiiwaFusionTrackMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    double timestamp = 0.0,
    flatbuffers::Offset<TimeEvent> timeEvent = 0,
    DeviceState deviceState_type = DeviceState::NONE,
    flatbuffers::Offset<void> deviceState = 0) {
  KUKAiiwaFusionTrackMessageBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_deviceState(deviceState);
  builder_.add_timeEvent(timeEvent);
  builder_.add_deviceState_type(deviceState_type);
  return builder_.Finish();
}

flatbuffers::Offset<KUKAiiwaFusionTrackMessage> CreateKUKAiiwaFusionTrackMessage(flatbuffers::FlatBufferBuilder &_fbb, const KUKAiiwaFusionTrackMessageT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct LogKUKAiiwaFusionTrackT : public flatbuffers::NativeTable {
  typedef LogKUKAiiwaFusionTrack TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.LogKUKAiiwaFusionTrackT";
  }
  std::vector<std::unique_ptr<KUKAiiwaFusionTrackMessageT>> states;
  LogKUKAiiwaFusionTrackT() {
  }
};

struct LogKUKAiiwaFusionTrack FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LogKUKAiiwaFusionTrackT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.LogKUKAiiwaFusionTrack";
  }
  enum {
    VT_STATES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<KUKAiiwaFusionTrackMessage>> *states() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<KUKAiiwaFusionTrackMessage>> *>(VT_STATES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STATES) &&
           verifier.Verify(states()) &&
           verifier.VerifyVectorOfTables(states()) &&
           verifier.EndTable();
  }
  LogKUKAiiwaFusionTrackT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(LogKUKAiiwaFusionTrackT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<LogKUKAiiwaFusionTrack> Pack(flatbuffers::FlatBufferBuilder &_fbb, const LogKUKAiiwaFusionTrackT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct LogKUKAiiwaFusionTrackBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_states(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<KUKAiiwaFusionTrackMessage>>> states) {
    fbb_.AddOffset(LogKUKAiiwaFusionTrack::VT_STATES, states);
  }
  explicit LogKUKAiiwaFusionTrackBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LogKUKAiiwaFusionTrackBuilder &operator=(const LogKUKAiiwaFusionTrackBuilder &);
  flatbuffers::Offset<LogKUKAiiwaFusionTrack> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LogKUKAiiwaFusionTrack>(end);
    return o;
  }
};

inline flatbuffers::Offset<LogKUKAiiwaFusionTrack> CreateLogKUKAiiwaFusionTrack(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<KUKAiiwaFusionTrackMessage>>> states = 0) {
  LogKUKAiiwaFusionTrackBuilder builder_(_fbb);
  builder_.add_states(states);
  return builder_.Finish();
}

inline flatbuffers::Offset<LogKUKAiiwaFusionTrack> CreateLogKUKAiiwaFusionTrackDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<KUKAiiwaFusionTrackMessage>> *states = nullptr) {
  return grl::flatbuffer::CreateLogKUKAiiwaFusionTrack(
      _fbb,
      states ? _fbb.CreateVector<flatbuffers::Offset<KUKAiiwaFusionTrackMessage>>(*states) : 0);
}

flatbuffers::Offset<LogKUKAiiwaFusionTrack> CreateLogKUKAiiwaFusionTrack(flatbuffers::FlatBufferBuilder &_fbb, const LogKUKAiiwaFusionTrackT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline KUKAiiwaFusionTrackMessageT *KUKAiiwaFusionTrackMessage::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new KUKAiiwaFusionTrackMessageT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void KUKAiiwaFusionTrackMessage::UnPackTo(KUKAiiwaFusionTrackMessageT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = timestamp(); _o->timestamp = _e; };
  { auto _e = timeEvent(); if (_e) _o->timeEvent = std::unique_ptr<TimeEventT>(_e->UnPack(_resolver)); };
  { auto _e = deviceState_type(); _o->deviceState.type = _e; };
  { auto _e = deviceState(); if (_e) _o->deviceState.value = DeviceStateUnion::UnPack(_e, deviceState_type(), _resolver); };
}

inline flatbuffers::Offset<KUKAiiwaFusionTrackMessage> KUKAiiwaFusionTrackMessage::Pack(flatbuffers::FlatBufferBuilder &_fbb, const KUKAiiwaFusionTrackMessageT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateKUKAiiwaFusionTrackMessage(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<KUKAiiwaFusionTrackMessage> CreateKUKAiiwaFusionTrackMessage(flatbuffers::FlatBufferBuilder &_fbb, const KUKAiiwaFusionTrackMessageT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const KUKAiiwaFusionTrackMessageT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _timestamp = _o->timestamp;
  auto _timeEvent = _o->timeEvent ? CreateTimeEvent(_fbb, _o->timeEvent.get(), _rehasher) : 0;
  auto _deviceState_type = _o->deviceState.type;
  auto _deviceState = _o->deviceState.Pack(_fbb);
  return grl::flatbuffer::CreateKUKAiiwaFusionTrackMessage(
      _fbb,
      _timestamp,
      _timeEvent,
      _deviceState_type,
      _deviceState);
}

inline LogKUKAiiwaFusionTrackT *LogKUKAiiwaFusionTrack::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new LogKUKAiiwaFusionTrackT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void LogKUKAiiwaFusionTrack::UnPackTo(LogKUKAiiwaFusionTrackT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = states(); if (_e) { _o->states.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->states[_i] = std::unique_ptr<KUKAiiwaFusionTrackMessageT>(_e->Get(_i)->UnPack(_resolver)); } } };
}

inline flatbuffers::Offset<LogKUKAiiwaFusionTrack> LogKUKAiiwaFusionTrack::Pack(flatbuffers::FlatBufferBuilder &_fbb, const LogKUKAiiwaFusionTrackT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateLogKUKAiiwaFusionTrack(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<LogKUKAiiwaFusionTrack> CreateLogKUKAiiwaFusionTrack(flatbuffers::FlatBufferBuilder &_fbb, const LogKUKAiiwaFusionTrackT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const LogKUKAiiwaFusionTrackT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _states = _o->states.size() ? _fbb.CreateVector<flatbuffers::Offset<KUKAiiwaFusionTrackMessage>> (_o->states.size(), [](size_t i, _VectorArgs *__va) { return CreateKUKAiiwaFusionTrackMessage(*__va->__fbb, __va->__o->states[i].get(), __va->__rehasher); }, &_va ) : 0;
  return grl::flatbuffer::CreateLogKUKAiiwaFusionTrack(
      _fbb,
      _states);
}

inline bool VerifyDeviceState(flatbuffers::Verifier &verifier, const void *obj, DeviceState type) {
  switch (type) {
    case DeviceState::NONE: {
      return true;
    }
    case DeviceState::KUKAiiwaState: {
      auto ptr = reinterpret_cast<const KUKAiiwaState *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case DeviceState::FusionTrackMessage: {
      auto ptr = reinterpret_cast<const FusionTrackMessage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyDeviceStateVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyDeviceState(
        verifier,  values->Get(i), types->GetEnum<DeviceState>(i))) {
      return false;
    }
  }
  return true;
}

inline void *DeviceStateUnion::UnPack(const void *obj, DeviceState type, const flatbuffers::resolver_function_t *resolver) {
  switch (type) {
    case DeviceState::KUKAiiwaState: {
      auto ptr = reinterpret_cast<const KUKAiiwaState *>(obj);
      return ptr->UnPack(resolver);
    }
    case DeviceState::FusionTrackMessage: {
      auto ptr = reinterpret_cast<const FusionTrackMessage *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline flatbuffers::Offset<void> DeviceStateUnion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher) const {
  switch (type) {
    case DeviceState::KUKAiiwaState: {
      auto ptr = reinterpret_cast<const KUKAiiwaStateT *>(value);
      return CreateKUKAiiwaState(_fbb, ptr, _rehasher).Union();
    }
    case DeviceState::FusionTrackMessage: {
      auto ptr = reinterpret_cast<const FusionTrackMessageT *>(value);
      return CreateFusionTrackMessage(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline DeviceStateUnion::DeviceStateUnion(const DeviceStateUnion &u) FLATBUFFERS_NOEXCEPT : type(u.type), value(nullptr) {
  switch (type) {
    case DeviceState::KUKAiiwaState: {
      assert(false);  // KUKAiiwaStateT not copyable.
      break;
    }
    case DeviceState::FusionTrackMessage: {
      assert(false);  // FusionTrackMessageT not copyable.
      break;
    }
    default:
      break;
  }
}

inline void DeviceStateUnion::Reset() {
  switch (type) {
    case DeviceState::KUKAiiwaState: {
      auto ptr = reinterpret_cast<KUKAiiwaStateT *>(value);
      delete ptr;
      break;
    }
    case DeviceState::FusionTrackMessage: {
      auto ptr = reinterpret_cast<FusionTrackMessageT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = DeviceState::NONE;
}

inline const grl::flatbuffer::LogKUKAiiwaFusionTrack *GetLogKUKAiiwaFusionTrack(const void *buf) {
  return flatbuffers::GetRoot<grl::flatbuffer::LogKUKAiiwaFusionTrack>(buf);
}

inline const grl::flatbuffer::LogKUKAiiwaFusionTrack *GetSizePrefixedLogKUKAiiwaFusionTrack(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<grl::flatbuffer::LogKUKAiiwaFusionTrack>(buf);
}

inline const char *LogKUKAiiwaFusionTrackIdentifier() {
  return "flik";
}

inline bool LogKUKAiiwaFusionTrackBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, LogKUKAiiwaFusionTrackIdentifier());
}

inline bool VerifyLogKUKAiiwaFusionTrackBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<grl::flatbuffer::LogKUKAiiwaFusionTrack>(LogKUKAiiwaFusionTrackIdentifier());
}

inline bool VerifySizePrefixedLogKUKAiiwaFusionTrackBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<grl::flatbuffer::LogKUKAiiwaFusionTrack>(LogKUKAiiwaFusionTrackIdentifier());
}

inline const char *LogKUKAiiwaFusionTrackExtension() {
  return "flik";
}

inline void FinishLogKUKAiiwaFusionTrackBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<grl::flatbuffer::LogKUKAiiwaFusionTrack> root) {
  fbb.Finish(root, LogKUKAiiwaFusionTrackIdentifier());
}

inline void FinishSizePrefixedLogKUKAiiwaFusionTrackBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<grl::flatbuffer::LogKUKAiiwaFusionTrack> root) {
  fbb.FinishSizePrefixed(root, LogKUKAiiwaFusionTrackIdentifier());
}

inline std::unique_ptr<LogKUKAiiwaFusionTrackT> UnPackLogKUKAiiwaFusionTrack(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<LogKUKAiiwaFusionTrackT>(GetLogKUKAiiwaFusionTrack(buf)->UnPack(res));
}

}  // namespace flatbuffer
}  // namespace grl

#endif  // FLATBUFFERS_GENERATED_LOGKUKAIIWAFUSIONTRACK_GRL_FLATBUFFER_H_
