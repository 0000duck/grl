// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_JOINTSTATE_GRL_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_JOINTSTATE_GRL_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"

namespace grl {
namespace flatbuffer {

struct JointState;
struct JointStateT;

struct JointStateT : public flatbuffers::NativeTable {
  typedef JointState TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.JointStateT";
  }
  std::vector<double> position;
  std::vector<double> velocity;
  std::vector<double> acceleration;
  std::vector<double> torque;
  JointStateT() {
  }
};

struct JointState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef JointStateT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.JointState";
  }
  enum {
    VT_POSITION = 4,
    VT_VELOCITY = 6,
    VT_ACCELERATION = 8,
    VT_TORQUE = 10
  };
  const flatbuffers::Vector<double> *position() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_POSITION);
  }
  const flatbuffers::Vector<double> *velocity() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_VELOCITY);
  }
  const flatbuffers::Vector<double> *acceleration() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_ACCELERATION);
  }
  const flatbuffers::Vector<double> *torque() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_TORQUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.Verify(position()) &&
           VerifyOffset(verifier, VT_VELOCITY) &&
           verifier.Verify(velocity()) &&
           VerifyOffset(verifier, VT_ACCELERATION) &&
           verifier.Verify(acceleration()) &&
           VerifyOffset(verifier, VT_TORQUE) &&
           verifier.Verify(torque()) &&
           verifier.EndTable();
  }
  JointStateT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(JointStateT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<JointState> Pack(flatbuffers::FlatBufferBuilder &_fbb, const JointStateT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct JointStateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(flatbuffers::Offset<flatbuffers::Vector<double>> position) {
    fbb_.AddOffset(JointState::VT_POSITION, position);
  }
  void add_velocity(flatbuffers::Offset<flatbuffers::Vector<double>> velocity) {
    fbb_.AddOffset(JointState::VT_VELOCITY, velocity);
  }
  void add_acceleration(flatbuffers::Offset<flatbuffers::Vector<double>> acceleration) {
    fbb_.AddOffset(JointState::VT_ACCELERATION, acceleration);
  }
  void add_torque(flatbuffers::Offset<flatbuffers::Vector<double>> torque) {
    fbb_.AddOffset(JointState::VT_TORQUE, torque);
  }
  explicit JointStateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  JointStateBuilder &operator=(const JointStateBuilder &);
  flatbuffers::Offset<JointState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<JointState>(end);
    return o;
  }
};

inline flatbuffers::Offset<JointState> CreateJointState(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<double>> position = 0,
    flatbuffers::Offset<flatbuffers::Vector<double>> velocity = 0,
    flatbuffers::Offset<flatbuffers::Vector<double>> acceleration = 0,
    flatbuffers::Offset<flatbuffers::Vector<double>> torque = 0) {
  JointStateBuilder builder_(_fbb);
  builder_.add_torque(torque);
  builder_.add_acceleration(acceleration);
  builder_.add_velocity(velocity);
  builder_.add_position(position);
  return builder_.Finish();
}

inline flatbuffers::Offset<JointState> CreateJointStateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<double> *position = nullptr,
    const std::vector<double> *velocity = nullptr,
    const std::vector<double> *acceleration = nullptr,
    const std::vector<double> *torque = nullptr) {
  return grl::flatbuffer::CreateJointState(
      _fbb,
      position ? _fbb.CreateVector<double>(*position) : 0,
      velocity ? _fbb.CreateVector<double>(*velocity) : 0,
      acceleration ? _fbb.CreateVector<double>(*acceleration) : 0,
      torque ? _fbb.CreateVector<double>(*torque) : 0);
}

flatbuffers::Offset<JointState> CreateJointState(flatbuffers::FlatBufferBuilder &_fbb, const JointStateT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline JointStateT *JointState::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new JointStateT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void JointState::UnPackTo(JointStateT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = position(); if (_e) { _o->position.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->position[_i] = _e->Get(_i); } } };
  { auto _e = velocity(); if (_e) { _o->velocity.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->velocity[_i] = _e->Get(_i); } } };
  { auto _e = acceleration(); if (_e) { _o->acceleration.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->acceleration[_i] = _e->Get(_i); } } };
  { auto _e = torque(); if (_e) { _o->torque.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->torque[_i] = _e->Get(_i); } } };
}

inline flatbuffers::Offset<JointState> JointState::Pack(flatbuffers::FlatBufferBuilder &_fbb, const JointStateT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateJointState(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<JointState> CreateJointState(flatbuffers::FlatBufferBuilder &_fbb, const JointStateT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const JointStateT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _position = _o->position.size() ? _fbb.CreateVector(_o->position) : 0;
  auto _velocity = _o->velocity.size() ? _fbb.CreateVector(_o->velocity) : 0;
  auto _acceleration = _o->acceleration.size() ? _fbb.CreateVector(_o->acceleration) : 0;
  auto _torque = _o->torque.size() ? _fbb.CreateVector(_o->torque) : 0;
  return grl::flatbuffer::CreateJointState(
      _fbb,
      _position,
      _velocity,
      _acceleration,
      _torque);
}

}  // namespace flatbuffer
}  // namespace grl

#endif  // FLATBUFFERS_GENERATED_JOINTSTATE_GRL_FLATBUFFER_H_
