// Generated from fusiontrack.proto
// Atracsys FusionTrack Optical Tracker data log
// This file is included in LogKUKAiiwaFusionTrack.fbs, and the two fbs files share the same root_type.
include "Time.fbs";
include "Geometry.fbs";

namespace grl.flatbuffer;
// All these enums and tables have their associated class (or structure) in ftkInterface.h
enum ftkQueryStatus : int {
  QS_WAR_SKIPPED = -1,
  QS_OK = 0,
  QS_ERR_OVERFLOW = 1,
  QS_ERR_INVALID_RESERVED_SIZE = 2,
  QS_REPROCESS = 10,
}

enum ftkDeviceType : int {
  DEV_SIMULATOR = 0,
  DEV_INFINITRACK = 1,
  DEV_FUSIONTRACK_500 = 2,
  DEV_FUSIONTRACK_250 = 3,
  DEV_UNKNOWN_DEVICE = 127,
}

table ftkGeometry {
  name:string;
  geometryID:uint;
  version:uint;
  positions:[Vector3d];
}

table ftkMarker {
  name:string;
  ID:uint;
  geometryID:uint;
  geometryPresenceMask:[uint];
  transform:Pose;
}

table ftk3DFiducial {
  markerID:uint;
  leftIndex:uint;
  rightIndex:uint;
  position:Vector3d;
  epipolarErrorPixels:double;
  triangulationError:double;
  probability:double;
}

table ftkRegionOfInterest {
  centerXPixels:double;
  centerYPixels:double;
  RightEdge:uint;
  BottomEdge:uint;
  LeftEdge:uint;
  TopEdge:uint;
  pixelsCount:uint;
  probability:double;
}

/// Data for one frame capture
/// On the Atracsys FusionTrack optical tracker
/// look at ftkInterface.h for details
/// Frame class is defined in FusionTrack.hpp
table FusionTrackFrame {
  // seconds timestamp
  timestamp:double;
  serialNumber:ulong;
  // hardware timestamp
  hardwareTimestampUS:ulong;
  desynchroUS:ulong;
  counter:uint;
  format:uint;
  width:uint;
  height:uint;
  imageStrideInBytes:int;
  imageHeaderVersion:uint;
  imageHeaderStatus:ftkQueryStatus;
  imageLeftPixels:string;
  imageLeftPixelsVersion:uint;
  imageLeftStatus:ftkQueryStatus;
  imageRightPixels:string;
  imageRightPixelsVersion:uint;
  imageRightStatus:ftkQueryStatus;
  regionsOfInterestLeft:[ftkRegionOfInterest];
  regionsOfInterestLeftVersion:uint;
  regionsOfInterestLeftStatus:int;
  regionsOfInterestRight:[ftkRegionOfInterest];
  regionsOfInterestRightVersion:uint;
  regionsOfInterestRightStatus:int;
  threeDFiducials:[ftk3DFiducial];
  threeDFiducialsVersion:uint;
  threeDFiducialsStatus:int;
  markers:[ftkMarker];
  markersVersion:uint;
  markersStatus:int;
  deviceType:ftkDeviceType;
  ftkError:long;
}

// Data that doesn't change often
//  FusionTrackParameters has struct Params in FusionTrack.hpp
table FusionTrackParameters {

  /// Name for this connection / FusionTrack driver instance
  /// useful for debugging and when multiple data sources are used
  name:string;

  /// Name for the clock on the FusionTrack
  /// Useful for timing calculations and debugging.
  deviceClockID:string;

  /// Name for the local clock on which this driver runs
  /// Useful for timing calculations and debugging.
  localClockID:string;

  /// dimensions of the markers that may be present
  geometries:[ftkGeometry];

  /// Geometries aka fiducials aka markers to be loaded from ini files.
  /// The data loaded should not repeat IDs from MarkerIDs.
  geometryFilenames:[string];
  /// Path to the directory with the marker ini files listed above
  /// Uses the default current working directory if empty
  /// geometryDir:[string];
  geometryDir:string;
  /// Optional list of optical tracker device ids to expect
  /// will be loaded automatically if empty
  TrackerDeviceIDs:[ulong];
  /// Marker geometry unique integer IDs
  markerIDs:[ulong];
  /// Optional Marker geometry names with one for each ID, none otherwise
  markerNames:[string];
  // device serial numbers
  m_deviceSerialNumbers:[ulong];
  // fusiontrack vs infinitrack
  m_device_types:[ubyte];
}

// FusionTrackMessage is one of the DeviceState, the other one is KUKAiiwaState.

table FusionTrackMessage {
  // seconds timestamp, defined in FusionTrackFrame
  timestamp:double;
  // The configuration data of FusionTrack, which is seldom changed.
  parameters:FusionTrackParameters;
  // TimeEvent is defined in Time.fbs and TimeEvent.hpp
  timeEvent:TimeEvent;
  frame:FusionTrackFrame;
}
