// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VREPPATH_GRL_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_VREPPATH_GRL_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"

#include "Euler_generated.h"
#include "Geometry_generated.h"
#include "VrepControlPoint_generated.h"

namespace grl {
namespace flatbuffer {

struct VrepPath;
struct VrepPathT;

struct VrepPathT : public flatbuffers::NativeTable {
  typedef VrepPath TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.VrepPathT";
  }
  std::vector<std::unique_ptr<VrepControlPointT>> controlPoints;
  VrepPathT() {
  }
};

struct VrepPath FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef VrepPathT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.VrepPath";
  }
  enum {
    VT_CONTROLPOINTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<VrepControlPoint>> *controlPoints() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<VrepControlPoint>> *>(VT_CONTROLPOINTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CONTROLPOINTS) &&
           verifier.Verify(controlPoints()) &&
           verifier.VerifyVectorOfTables(controlPoints()) &&
           verifier.EndTable();
  }
  VrepPathT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(VrepPathT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<VrepPath> Pack(flatbuffers::FlatBufferBuilder &_fbb, const VrepPathT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct VrepPathBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_controlPoints(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VrepControlPoint>>> controlPoints) {
    fbb_.AddOffset(VrepPath::VT_CONTROLPOINTS, controlPoints);
  }
  explicit VrepPathBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VrepPathBuilder &operator=(const VrepPathBuilder &);
  flatbuffers::Offset<VrepPath> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<VrepPath>(end);
    return o;
  }
};

inline flatbuffers::Offset<VrepPath> CreateVrepPath(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VrepControlPoint>>> controlPoints = 0) {
  VrepPathBuilder builder_(_fbb);
  builder_.add_controlPoints(controlPoints);
  return builder_.Finish();
}

inline flatbuffers::Offset<VrepPath> CreateVrepPathDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<VrepControlPoint>> *controlPoints = nullptr) {
  return grl::flatbuffer::CreateVrepPath(
      _fbb,
      controlPoints ? _fbb.CreateVector<flatbuffers::Offset<VrepControlPoint>>(*controlPoints) : 0);
}

flatbuffers::Offset<VrepPath> CreateVrepPath(flatbuffers::FlatBufferBuilder &_fbb, const VrepPathT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline VrepPathT *VrepPath::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new VrepPathT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void VrepPath::UnPackTo(VrepPathT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = controlPoints(); if (_e) { _o->controlPoints.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->controlPoints[_i] = std::unique_ptr<VrepControlPointT>(_e->Get(_i)->UnPack(_resolver)); } } };
}

inline flatbuffers::Offset<VrepPath> VrepPath::Pack(flatbuffers::FlatBufferBuilder &_fbb, const VrepPathT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateVrepPath(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<VrepPath> CreateVrepPath(flatbuffers::FlatBufferBuilder &_fbb, const VrepPathT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const VrepPathT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _controlPoints = _o->controlPoints.size() ? _fbb.CreateVector<flatbuffers::Offset<VrepControlPoint>> (_o->controlPoints.size(), [](size_t i, _VectorArgs *__va) { return CreateVrepControlPoint(*__va->__fbb, __va->__o->controlPoints[i].get(), __va->__rehasher); }, &_va ) : 0;
  return grl::flatbuffer::CreateVrepPath(
      _fbb,
      _controlPoints);
}

inline const grl::flatbuffer::VrepPath *GetVrepPath(const void *buf) {
  return flatbuffers::GetRoot<grl::flatbuffer::VrepPath>(buf);
}

inline const grl::flatbuffer::VrepPath *GetSizePrefixedVrepPath(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<grl::flatbuffer::VrepPath>(buf);
}

inline bool VerifyVrepPathBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<grl::flatbuffer::VrepPath>(nullptr);
}

inline bool VerifySizePrefixedVrepPathBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<grl::flatbuffer::VrepPath>(nullptr);
}

inline void FinishVrepPathBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<grl::flatbuffer::VrepPath> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedVrepPathBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<grl::flatbuffer::VrepPath> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<VrepPathT> UnPackVrepPath(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<VrepPathT>(GetVrepPath(buf)->UnPack(res));
}

}  // namespace flatbuffer
}  // namespace grl

#endif  // FLATBUFFERS_GENERATED_VREPPATH_GRL_FLATBUFFER_H_
