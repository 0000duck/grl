// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GEOMETRY_GRL_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_GEOMETRY_GRL_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"

namespace grl {
namespace flatbuffer {

struct Vector3d;

struct Quaternion;

struct Pose;

struct Wrench;

struct Inertia;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vector3d FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;

 public:
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.Vector3d";
  }
  Vector3d() {
    memset(this, 0, sizeof(Vector3d));
  }
  Vector3d(double _x, double _y, double _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  double x() const {
    return flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vector3d, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Quaternion FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;
  double w_;

 public:
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.Quaternion";
  }
  Quaternion() {
    memset(this, 0, sizeof(Quaternion));
  }
  Quaternion(double _x, double _y, double _z, double _w)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)),
        w_(flatbuffers::EndianScalar(_w)) {
  }
  double x() const {
    return flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return flatbuffers::EndianScalar(z_);
  }
  double w() const {
    return flatbuffers::EndianScalar(w_);
  }
};
FLATBUFFERS_STRUCT_END(Quaternion, 32);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Pose FLATBUFFERS_FINAL_CLASS {
 private:
  Vector3d position_;
  Quaternion orientation_;

 public:
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.Pose";
  }
  Pose() {
    memset(this, 0, sizeof(Pose));
  }
  Pose(const Vector3d &_position, const Quaternion &_orientation)
      : position_(_position),
        orientation_(_orientation) {
  }
  const Vector3d &position() const {
    return position_;
  }
  const Quaternion &orientation() const {
    return orientation_;
  }
};
FLATBUFFERS_STRUCT_END(Pose, 56);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Wrench FLATBUFFERS_FINAL_CLASS {
 private:
  Vector3d force_;
  Vector3d torque_;
  Vector3d force_offset_;

 public:
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.Wrench";
  }
  Wrench() {
    memset(this, 0, sizeof(Wrench));
  }
  Wrench(const Vector3d &_force, const Vector3d &_torque, const Vector3d &_force_offset)
      : force_(_force),
        torque_(_torque),
        force_offset_(_force_offset) {
  }
  const Vector3d &force() const {
    return force_;
  }
  const Vector3d &torque() const {
    return torque_;
  }
  const Vector3d &force_offset() const {
    return force_offset_;
  }
};
FLATBUFFERS_STRUCT_END(Wrench, 72);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Inertia FLATBUFFERS_FINAL_CLASS {
 private:
  double mass_;
  Pose pose_;
  double ixx_;
  double ixy_;
  double ixz_;
  double iyy_;
  double iyz_;
  double izz_;

 public:
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.Inertia";
  }
  Inertia() {
    memset(this, 0, sizeof(Inertia));
  }
  Inertia(double _mass, const Pose &_pose, double _ixx, double _ixy, double _ixz, double _iyy, double _iyz, double _izz)
      : mass_(flatbuffers::EndianScalar(_mass)),
        pose_(_pose),
        ixx_(flatbuffers::EndianScalar(_ixx)),
        ixy_(flatbuffers::EndianScalar(_ixy)),
        ixz_(flatbuffers::EndianScalar(_ixz)),
        iyy_(flatbuffers::EndianScalar(_iyy)),
        iyz_(flatbuffers::EndianScalar(_iyz)),
        izz_(flatbuffers::EndianScalar(_izz)) {
  }
  double mass() const {
    return flatbuffers::EndianScalar(mass_);
  }
  const Pose &pose() const {
    return pose_;
  }
  double ixx() const {
    return flatbuffers::EndianScalar(ixx_);
  }
  double ixy() const {
    return flatbuffers::EndianScalar(ixy_);
  }
  double ixz() const {
    return flatbuffers::EndianScalar(ixz_);
  }
  double iyy() const {
    return flatbuffers::EndianScalar(iyy_);
  }
  double iyz() const {
    return flatbuffers::EndianScalar(iyz_);
  }
  double izz() const {
    return flatbuffers::EndianScalar(izz_);
  }
};
FLATBUFFERS_STRUCT_END(Inertia, 112);

}  // namespace flatbuffer
}  // namespace grl

#endif  // FLATBUFFERS_GENERATED_GEOMETRY_GRL_FLATBUFFER_H_
