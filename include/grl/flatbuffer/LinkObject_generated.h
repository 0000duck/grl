// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LINKOBJECT_GRL_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_LINKOBJECT_GRL_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"

#include "Geometry_generated.h"

namespace grl {
namespace flatbuffer {

struct LinkObject;
struct LinkObjectT;

struct LinkObjectT : public flatbuffers::NativeTable {
  typedef LinkObject TableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.LinkObjectT";
  }
  std::string name;
  std::string parent;
  std::unique_ptr<Pose> pose;
  std::unique_ptr<Inertia> inertia;
  LinkObjectT() {
  }
};

struct LinkObject FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LinkObjectT NativeTableType;
  static FLATBUFFERS_CONSTEXPR const char *GetFullyQualifiedName() {
    return "grl.flatbuffer.LinkObject";
  }
  enum {
    VT_NAME = 4,
    VT_PARENT = 6,
    VT_POSE = 8,
    VT_INERTIA = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *parent() const {
    return GetPointer<const flatbuffers::String *>(VT_PARENT);
  }
  const Pose *pose() const {
    return GetStruct<const Pose *>(VT_POSE);
  }
  const Inertia *inertia() const {
    return GetStruct<const Inertia *>(VT_INERTIA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_PARENT) &&
           verifier.Verify(parent()) &&
           VerifyField<Pose>(verifier, VT_POSE) &&
           VerifyField<Inertia>(verifier, VT_INERTIA) &&
           verifier.EndTable();
  }
  LinkObjectT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(LinkObjectT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<LinkObject> Pack(flatbuffers::FlatBufferBuilder &_fbb, const LinkObjectT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct LinkObjectBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(LinkObject::VT_NAME, name);
  }
  void add_parent(flatbuffers::Offset<flatbuffers::String> parent) {
    fbb_.AddOffset(LinkObject::VT_PARENT, parent);
  }
  void add_pose(const Pose *pose) {
    fbb_.AddStruct(LinkObject::VT_POSE, pose);
  }
  void add_inertia(const Inertia *inertia) {
    fbb_.AddStruct(LinkObject::VT_INERTIA, inertia);
  }
  explicit LinkObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LinkObjectBuilder &operator=(const LinkObjectBuilder &);
  flatbuffers::Offset<LinkObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LinkObject>(end);
    return o;
  }
};

inline flatbuffers::Offset<LinkObject> CreateLinkObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> parent = 0,
    const Pose *pose = 0,
    const Inertia *inertia = 0) {
  LinkObjectBuilder builder_(_fbb);
  builder_.add_inertia(inertia);
  builder_.add_pose(pose);
  builder_.add_parent(parent);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<LinkObject> CreateLinkObjectDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *parent = nullptr,
    const Pose *pose = 0,
    const Inertia *inertia = 0) {
  return grl::flatbuffer::CreateLinkObject(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      parent ? _fbb.CreateString(parent) : 0,
      pose,
      inertia);
}

flatbuffers::Offset<LinkObject> CreateLinkObject(flatbuffers::FlatBufferBuilder &_fbb, const LinkObjectT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline LinkObjectT *LinkObject::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new LinkObjectT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void LinkObject::UnPackTo(LinkObjectT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); };
  { auto _e = parent(); if (_e) _o->parent = _e->str(); };
  { auto _e = pose(); if (_e) _o->pose = std::unique_ptr<Pose>(new Pose(*_e)); };
  { auto _e = inertia(); if (_e) _o->inertia = std::unique_ptr<Inertia>(new Inertia(*_e)); };
}

inline flatbuffers::Offset<LinkObject> LinkObject::Pack(flatbuffers::FlatBufferBuilder &_fbb, const LinkObjectT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateLinkObject(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<LinkObject> CreateLinkObject(flatbuffers::FlatBufferBuilder &_fbb, const LinkObjectT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const LinkObjectT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _parent = _o->parent.empty() ? 0 : _fbb.CreateString(_o->parent);
  auto _pose = _o->pose ? _o->pose.get() : 0;
  auto _inertia = _o->inertia ? _o->inertia.get() : 0;
  return grl::flatbuffer::CreateLinkObject(
      _fbb,
      _name,
      _parent,
      _pose,
      _inertia);
}

}  // namespace flatbuffer
}  // namespace grl

#endif  // FLATBUFFERS_GENERATED_LINKOBJECT_GRL_FLATBUFFER_H_
